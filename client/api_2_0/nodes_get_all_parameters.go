package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewNodesGetAllParams creates a new NodesGetAllParams object
// with the default values initialized.
func NewNodesGetAllParams() *NodesGetAllParams {
	var ()
	return &NodesGetAllParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNodesGetAllParamsWithTimeout creates a new NodesGetAllParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNodesGetAllParamsWithTimeout(timeout time.Duration) *NodesGetAllParams {
	var ()
	return &NodesGetAllParams{

		timeout: timeout,
	}
}

/*NodesGetAllParams contains all the parameters to send to the API endpoint
for the nodes get all operation typically these are written to a http.Request
*/
type NodesGetAllParams struct {

	/*NrDollarSkip
	  Query string specifying properties to search for

	*/
	DollarSkip *int64
	/*NrDollarTop
	  Query string specifying properties to search for

	*/
	DollarTop *int64
	/*Sort
	  Query string specifying properties to sort with

	*/
	Sort *string

	timeout time.Duration
}

// WithDollarSkip adds the dollarSkip to the nodes get all params
func (o *NodesGetAllParams) WithDollarSkip(dollarSkip *int64) *NodesGetAllParams {
	o.DollarSkip = dollarSkip
	return o
}

// WithDollarTop adds the dollarTop to the nodes get all params
func (o *NodesGetAllParams) WithDollarTop(dollarTop *int64) *NodesGetAllParams {
	o.DollarTop = dollarTop
	return o
}

// WithSort adds the sort to the nodes get all params
func (o *NodesGetAllParams) WithSort(sort *string) *NodesGetAllParams {
	o.Sort = sort
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *NodesGetAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.DollarSkip != nil {

		// query param $skip
		var qrNrDollarSkip int64
		if o.DollarSkip != nil {
			qrNrDollarSkip = *o.DollarSkip
		}
		qNrDollarSkip := swag.FormatInt64(qrNrDollarSkip)
		if qNrDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qNrDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrNrDollarTop int64
		if o.DollarTop != nil {
			qrNrDollarTop = *o.DollarTop
		}
		qNrDollarTop := swag.FormatInt64(qrNrDollarTop)
		if qNrDollarTop != "" {
			if err := r.SetQueryParam("$top", qNrDollarTop); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
