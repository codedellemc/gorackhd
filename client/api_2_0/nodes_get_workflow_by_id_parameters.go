package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewNodesGetWorkflowByIDParams creates a new NodesGetWorkflowByIDParams object
// with the default values initialized.
func NewNodesGetWorkflowByIDParams() *NodesGetWorkflowByIDParams {
	var ()
	return &NodesGetWorkflowByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNodesGetWorkflowByIDParamsWithTimeout creates a new NodesGetWorkflowByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNodesGetWorkflowByIDParamsWithTimeout(timeout time.Duration) *NodesGetWorkflowByIDParams {
	var ()
	return &NodesGetWorkflowByIDParams{

		timeout: timeout,
	}
}

/*NodesGetWorkflowByIDParams contains all the parameters to send to the API endpoint
for the nodes get workflow by Id operation typically these are written to a http.Request
*/
type NodesGetWorkflowByIDParams struct {

	/*Active
	  A query string to specify workflow properties to search for

	*/
	Active *bool
	/*Identifier
	  The node identifier

	*/
	Identifier string

	timeout time.Duration
}

// WithActive adds the active to the nodes get workflow by Id params
func (o *NodesGetWorkflowByIDParams) WithActive(active *bool) *NodesGetWorkflowByIDParams {
	o.Active = active
	return o
}

// WithIdentifier adds the identifier to the nodes get workflow by Id params
func (o *NodesGetWorkflowByIDParams) WithIdentifier(identifier string) *NodesGetWorkflowByIDParams {
	o.Identifier = identifier
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *NodesGetWorkflowByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool
		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {
			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}

	}

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
