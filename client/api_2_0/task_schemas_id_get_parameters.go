package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTaskSchemasIDGetParams creates a new TaskSchemasIDGetParams object
// with the default values initialized.
func NewTaskSchemasIDGetParams() *TaskSchemasIDGetParams {
	var ()
	return &TaskSchemasIDGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTaskSchemasIDGetParamsWithTimeout creates a new TaskSchemasIDGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTaskSchemasIDGetParamsWithTimeout(timeout time.Duration) *TaskSchemasIDGetParams {
	var ()
	return &TaskSchemasIDGetParams{

		timeout: timeout,
	}
}

/*TaskSchemasIDGetParams contains all the parameters to send to the API endpoint
for the task schemas Id get operation typically these are written to a http.Request
*/
type TaskSchemasIDGetParams struct {

	/*Identifier
	  The filename of the task schema

	*/
	Identifier string
	/*ResolveRef
	  The reference resolve flag. false - a simple schema with any internal reference only in the response. true - all the internal references will be resolved and fully defined in the response.


	*/
	ResolveRef *bool

	timeout time.Duration
}

// WithIdentifier adds the identifier to the task schemas Id get params
func (o *TaskSchemasIDGetParams) WithIdentifier(identifier string) *TaskSchemasIDGetParams {
	o.Identifier = identifier
	return o
}

// WithResolveRef adds the resolveRef to the task schemas Id get params
func (o *TaskSchemasIDGetParams) WithResolveRef(resolveRef *bool) *TaskSchemasIDGetParams {
	o.ResolveRef = resolveRef
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *TaskSchemasIDGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	if o.ResolveRef != nil {

		// query param resolveRef
		var qrResolveRef bool
		if o.ResolveRef != nil {
			qrResolveRef = *o.ResolveRef
		}
		qResolveRef := swag.FormatBool(qrResolveRef)
		if qResolveRef != "" {
			if err := r.SetQueryParam("resolveRef", qResolveRef); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
