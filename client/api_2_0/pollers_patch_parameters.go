package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// NewPollersPatchParams creates a new PollersPatchParams object
// with the default values initialized.
func NewPollersPatchParams() *PollersPatchParams {
	var ()
	return &PollersPatchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPollersPatchParamsWithTimeout creates a new PollersPatchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPollersPatchParamsWithTimeout(timeout time.Duration) *PollersPatchParams {
	var ()
	return &PollersPatchParams{

		timeout: timeout,
	}
}

/*PollersPatchParams contains all the parameters to send to the API endpoint
for the pollers patch operation typically these are written to a http.Request
*/
type PollersPatchParams struct {

	/*Content
	  The body must contain the specific properties of the poller that will be modified.

	*/
	Content *models.Poller20PartialPoller
	/*Identifier
	  The poller identifier

	*/
	Identifier string

	timeout time.Duration
}

// WithContent adds the content to the pollers patch params
func (o *PollersPatchParams) WithContent(content *models.Poller20PartialPoller) *PollersPatchParams {
	o.Content = content
	return o
}

// WithIdentifier adds the identifier to the pollers patch params
func (o *PollersPatchParams) WithIdentifier(identifier string) *PollersPatchParams {
	o.Identifier = identifier
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PollersPatchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Content == nil {
		o.Content = new(models.Poller20PartialPoller)
	}

	if err := r.SetBodyParam(o.Content); err != nil {
		return err
	}

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
