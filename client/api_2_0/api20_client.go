package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new api 2 0 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api 2 0 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddRole posts a new role

Create a new role and store it.
*/
func (a *Client) AddRole(params *AddRoleParams) (*AddRoleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addRole",
		Method:             "POST",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddRoleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRoleCreated), nil
}

/*
AddUser posts a new user

Create a new user and store it.
*/
func (a *Client) AddUser(params *AddUserParams) (*AddUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUser",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddUserCreated), nil
}

/*
CatalogsGet gets all catalogs

Get an array of catalog data describing all hardware in the system.
*/
func (a *Client) CatalogsGet(params *CatalogsGetParams) (*CatalogsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogsGet",
		Method:             "GET",
		PathPattern:        "/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CatalogsGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogsGetOK), nil
}

/*
CatalogsIDGet gets a catalog

Get a catalog based on its catalog identifier.
*/
func (a *Client) CatalogsIDGet(params *CatalogsIDGetParams) (*CatalogsIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCatalogsIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "catalogsIdGet",
		Method:             "GET",
		PathPattern:        "/catalogs/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CatalogsIDGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CatalogsIDGetOK), nil
}

/*
ConfigGet gets server configuration

Get the RackHD server configuration properties.
*/
func (a *Client) ConfigGet(params *ConfigGetParams) (*ConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configGet",
		Method:             "GET",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigGetOK), nil
}

/*
ConfigPatch patches server configuration

Modify the RackHD server configuration.
*/
func (a *Client) ConfigPatch(params *ConfigPatchParams) (*ConfigPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "configPatch",
		Method:             "PATCH",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigPatchReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigPatchOK), nil
}

/*
CreateTag posts a tag

Create a new tag.
*/
func (a *Client) CreateTag(params *CreateTagParams) (*CreateTagCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTag",
		Method:             "POST",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTagReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTagCreated), nil
}

/*
DeleteTag deletes the specified tag

Delete the specified tag.
*/
func (a *Client) DeleteTag(params *DeleteTagParams) (*DeleteTagNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTag",
		Method:             "DELETE",
		PathPattern:        "/tags/{tagName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTagReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTagNoContent), nil
}

/*
FilesDelete deletes a file

Delete a file based on uuid.
*/
func (a *Client) FilesDelete(params *FilesDeleteParams) (*FilesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesDelete",
		Method:             "DELETE",
		PathPattern:        "/files/{fileidentifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesDeleteReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesDeleteNoContent), nil
}

/*
FilesGet gets a file

Get file based on uuid or file name.
*/
func (a *Client) FilesGet(params *FilesGetParams) (*FilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesGet",
		Method:             "GET",
		PathPattern:        "/files/{fileidentifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesGetOK), nil
}

/*
FilesGetAll gets all files

Get a list of all files currently stored.
*/
func (a *Client) FilesGetAll(params *FilesGetAllParams) (*FilesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesGetAll",
		Method:             "GET",
		PathPattern:        "/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesGetAllReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesGetAllOK), nil
}

/*
FilesGetAllStatic lists all static files

List all static files

*/
func (a *Client) FilesGetAllStatic(params *FilesGetAllStaticParams) (*FilesGetAllStaticOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesGetAllStaticParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesGetAllStatic",
		Method:             "GET",
		PathPattern:        "/files/static/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesGetAllStaticReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesGetAllStaticOK), nil
}

/*
FilesMd5Get gets md5sum of file

Get md5sum based on file name.
*/
func (a *Client) FilesMd5Get(params *FilesMd5GetParams) (*FilesMd5GetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesMd5GetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesMd5Get",
		Method:             "GET",
		PathPattern:        "/files/{filename}/md5",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesMd5GetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesMd5GetOK), nil
}

/*
FilesMetadataGet gets file metadata

Get file metadata by file name.
*/
func (a *Client) FilesMetadataGet(params *FilesMetadataGetParams) (*FilesMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesMetadataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesMetadataGet",
		Method:             "GET",
		PathPattern:        "/files/{filename}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesMetadataGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesMetadataGetOK), nil
}

/*
FilesPut puts a file

Put file based on its filename. Returns the uuid of the stored file.
*/
func (a *Client) FilesPut(params *FilesPutParams) (*FilesPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFilesPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "filesPut",
		Method:             "PUT",
		PathPattern:        "/files/{fileidentifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FilesPutReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*FilesPutCreated), nil
}

/*
GetAllTags gets all tags

Get a list of all tags currently stored.
*/
func (a *Client) GetAllTags(params *GetAllTagsParams) (*GetAllTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllTags",
		Method:             "GET",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllTagsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllTagsOK), nil
}

/*
GetBootstrap gets tasks bootstrap js

Used internally by the system - get tasks bootstrap.js
*/
func (a *Client) GetBootstrap(params *GetBootstrapParams) (*GetBootstrapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBootstrapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBootstrap",
		Method:             "GET",
		PathPattern:        "/tasks/bootstrap.js",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBootstrapReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBootstrapOK), nil
}

/*
GetNodesByTag gets nodes with the specified tag

Get a list of nodes with the specified tag.
*/
func (a *Client) GetNodesByTag(params *GetNodesByTagParams) (*GetNodesByTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesByTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodesByTag",
		Method:             "GET",
		PathPattern:        "/tags/{tagName}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodesByTagReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodesByTagOK), nil
}

/*
GetRole gets a role

Get information about the specified role.
*/
func (a *Client) GetRole(params *GetRoleParams) (*GetRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRole",
		Method:             "GET",
		PathPattern:        "/roles/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRoleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoleOK), nil
}

/*
GetTag gets a tag

Get the data associated with the specified tag.
*/
func (a *Client) GetTag(params *GetTagParams) (*GetTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTag",
		Method:             "GET",
		PathPattern:        "/tags/{tagName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTagReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTagOK), nil
}

/*
GetTasksByID gets the specified task

Get the specified task.
*/
func (a *Client) GetTasksByID(params *GetTasksByIDParams) (*GetTasksByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasksById",
		Method:             "GET",
		PathPattern:        "/tasks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTasksByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTasksByIDOK), nil
}

/*
GetUser gets the specified user

Get information about the specified user.
*/
func (a *Client) GetUser(params *GetUserParams) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/users/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserOK), nil
}

/*
HooksDelByID deletes a hook

Delete a hook based on hook id.
*/
func (a *Client) HooksDelByID(params *HooksDelByIDParams) (*HooksDelByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksDelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksDelById",
		Method:             "DELETE",
		PathPattern:        "/hooks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksDelByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksDelByIDNoContent), nil
}

/*
HooksGetAll gets all hooks

Get all hooks
*/
func (a *Client) HooksGetAll(params *HooksGetAllParams) (*HooksGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksGetAll",
		Method:             "GET",
		PathPattern:        "/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksGetAllReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksGetAllOK), nil
}

/*
HooksGetByID gets a hook

Get hook by id
*/
func (a *Client) HooksGetByID(params *HooksGetByIDParams) (*HooksGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksGetById",
		Method:             "GET",
		PathPattern:        "/hooks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksGetByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksGetByIDOK), nil
}

/*
HooksPatchByID patches a hook

Modify the properties of a hook.
*/
func (a *Client) HooksPatchByID(params *HooksPatchByIDParams) (*HooksPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksPatchById",
		Method:             "PATCH",
		PathPattern:        "/hooks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksPatchByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksPatchByIDOK), nil
}

/*
HooksPost posts a hook

Create a new hook.
*/
func (a *Client) HooksPost(params *HooksPostParams) (*HooksPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHooksPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "hooksPost",
		Method:             "POST",
		PathPattern:        "/hooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HooksPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*HooksPostCreated), nil
}

/*
IbmsDefinitionsGetAll gets list of i b m s services

Get a list of IBMS schemas, which define the properties required to create IBMS settings.
*/
func (a *Client) IbmsDefinitionsGetAll(params *IbmsDefinitionsGetAllParams) (*IbmsDefinitionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsDefinitionsGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsDefinitionsGetAll",
		Method:             "GET",
		PathPattern:        "/ibms/definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsDefinitionsGetAllReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsDefinitionsGetAllOK), nil
}

/*
IbmsDefinitionsGetByName gets an i b m s service definition

Get the contents of the specified IBMS service schema.
*/
func (a *Client) IbmsDefinitionsGetByName(params *IbmsDefinitionsGetByNameParams) (*IbmsDefinitionsGetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsDefinitionsGetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsDefinitionsGetByName",
		Method:             "GET",
		PathPattern:        "/ibms/definitions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsDefinitionsGetByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsDefinitionsGetByNameOK), nil
}

/*
IbmsDeleteByID deletes i b m s settings

Delete the IBMS settings with the specified identifier.
*/
func (a *Client) IbmsDeleteByID(params *IbmsDeleteByIDParams) (*IbmsDeleteByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsDeleteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsDeleteById",
		Method:             "DELETE",
		PathPattern:        "/ibms/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsDeleteByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsDeleteByIDNoContent), nil
}

/*
IbmsGet gets list of all i b m service instances

Get a list of all In Band Management settings that have been associated with nodes.
*/
func (a *Client) IbmsGet(params *IbmsGetParams) (*IbmsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsGet",
		Method:             "GET",
		PathPattern:        "/ibms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsGetOK), nil
}

/*
IbmsGetByID gets an i b m s service

Get the IBMS settings associated with the specified identifier
*/
func (a *Client) IbmsGetByID(params *IbmsGetByIDParams) (*IbmsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsGetById",
		Method:             "GET",
		PathPattern:        "/ibms/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsGetByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsGetByIDOK), nil
}

/*
IbmsPatchByID patches i b m s settings

Update the properties of the IBMS settings with the specified identifier.
*/
func (a *Client) IbmsPatchByID(params *IbmsPatchByIDParams) (*IbmsPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsPatchById",
		Method:             "PATCH",
		PathPattern:        "/ibms/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsPatchByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsPatchByIDOK), nil
}

/*
IbmsPut puts an i b m service

Create or update a single IBM service, and associate it with a node.
*/
func (a *Client) IbmsPut(params *IbmsPutParams) (*IbmsPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIbmsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ibmsPut",
		Method:             "PUT",
		PathPattern:        "/ibms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IbmsPutReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*IbmsPutCreated), nil
}

/*
ListRoles gets the list of roles

Get the list of roles currently stored in the system.
*/
func (a *Client) ListRoles(params *ListRolesParams) (*ListRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRoles",
		Method:             "GET",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRolesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRolesOK), nil
}

/*
ListUsers gets the list of users

Get the list of users currently stored in the system.
*/
func (a *Client) ListUsers(params *ListUsersParams) (*ListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListUsersOK), nil
}

/*
LookupsDelByID deletes a lookup

Delete the specified lookup.
*/
func (a *Client) LookupsDelByID(params *LookupsDelByIDParams) (*LookupsDelByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookupsDelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lookupsDelById",
		Method:             "DELETE",
		PathPattern:        "/lookups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LookupsDelByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookupsDelByIDNoContent), nil
}

/*
LookupsGet gets a list of lookups

Get a list of all lookups currently stored. Lookups relate mac addresses to ip addresses.
*/
func (a *Client) LookupsGet(params *LookupsGetParams) (*LookupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lookupsGet",
		Method:             "GET",
		PathPattern:        "/lookups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LookupsGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookupsGetOK), nil
}

/*
LookupsGetByID gets a lookup

Get a lookup by specifying its identifier.
*/
func (a *Client) LookupsGetByID(params *LookupsGetByIDParams) (*LookupsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookupsGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lookupsGetById",
		Method:             "GET",
		PathPattern:        "/lookups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LookupsGetByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookupsGetByIDOK), nil
}

/*
LookupsPatchByID patches a lookup

Modify the properties of a lookup.
*/
func (a *Client) LookupsPatchByID(params *LookupsPatchByIDParams) (*LookupsPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookupsPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lookupsPatchById",
		Method:             "PATCH",
		PathPattern:        "/lookups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LookupsPatchByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookupsPatchByIDOK), nil
}

/*
LookupsPost posts a lookup

Create and store a new lookup.
*/
func (a *Client) LookupsPost(params *LookupsPostParams) (*LookupsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLookupsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "lookupsPost",
		Method:             "POST",
		PathPattern:        "/lookups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LookupsPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*LookupsPostCreated), nil
}

/*
ModifyRole patches a role

Modify the properties of a role.
*/
func (a *Client) ModifyRole(params *ModifyRoleParams) (*ModifyRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyRole",
		Method:             "PATCH",
		PathPattern:        "/roles/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyRoleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRoleOK), nil
}

/*
ModifyUser patches the specified user

Modify the properties of a user.
*/
func (a *Client) ModifyUser(params *ModifyUserParams) (*ModifyUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyUser",
		Method:             "PATCH",
		PathPattern:        "/users/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyUserOK), nil
}

/*
NodesAddRelations adds relationships between nodes

Edit the relations fields of a specifc node to add one more relationships.
*/
func (a *Client) NodesAddRelations(params *NodesAddRelationsParams) (*NodesAddRelationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesAddRelationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesAddRelations",
		Method:             "PUT",
		PathPattern:        "/nodes/{identifier}/relations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesAddRelationsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesAddRelationsOK), nil
}

/*
NodesDelByID deletes a node

Delete the specified node.
*/
func (a *Client) NodesDelByID(params *NodesDelByIDParams) (*NodesDelByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesDelByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesDelById",
		Method:             "DELETE",
		PathPattern:        "/nodes/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesDelByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesDelByIDNoContent), nil
}

/*
NodesDelRelations removes relations from a node

Edit the relations fields of nodes to remove specific relationships
*/
func (a *Client) NodesDelRelations(params *NodesDelRelationsParams) (*NodesDelRelationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesDelRelationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesDelRelations",
		Method:             "DELETE",
		PathPattern:        "/nodes/{identifier}/relations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesDelRelationsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesDelRelationsNoContent), nil
}

/*
NodesDelTagByID deletes a tag from a node

Delete the specified tag from the specified node.
*/
func (a *Client) NodesDelTagByID(params *NodesDelTagByIDParams) (*NodesDelTagByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesDelTagByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesDelTagById",
		Method:             "DELETE",
		PathPattern:        "/nodes/{identifier}/tags/{tagName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesDelTagByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesDelTagByIDNoContent), nil
}

/*
NodesGetAll gets a list of nodes

Get a list of all currently stored nodes.
*/
func (a *Client) NodesGetAll(params *NodesGetAllParams) (*NodesGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetAll",
		Method:             "GET",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetAllReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetAllOK), nil
}

/*
NodesGetByID gets a node

Get all information on the specified node.
*/
func (a *Client) NodesGetByID(params *NodesGetByIDParams) (*NodesGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetByIDOK), nil
}

/*
NodesGetCatalogByID gets the catalogs for a node

Get a list of all of the catalogs for the specified node.
*/
func (a *Client) NodesGetCatalogByID(params *NodesGetCatalogByIDParams) (*NodesGetCatalogByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetCatalogByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetCatalogById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetCatalogByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetCatalogByIDOK), nil
}

/*
NodesGetCatalogSourceByID gets the catalogs for a node by source

Get a list of all of the catalogs for the specified node, containing the specified value of the source catalog property.
*/
func (a *Client) NodesGetCatalogSourceByID(params *NodesGetCatalogSourceByIDParams) (*NodesGetCatalogSourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetCatalogSourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetCatalogSourceById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/catalogs/{source}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetCatalogSourceByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetCatalogSourceByIDOK), nil
}

/*
NodesGetObmsByNodeID gets all o b m services

Get all the OBM settings for the specified node.
*/
func (a *Client) NodesGetObmsByNodeID(params *NodesGetObmsByNodeIDParams) (*NodesGetObmsByNodeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetObmsByNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetObmsByNodeId",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/obm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetObmsByNodeIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetObmsByNodeIDOK), nil
}

/*
NodesGetPollersByID gets the pollers for a node

Get a list of all of the pollers for the specified node.
*/
func (a *Client) NodesGetPollersByID(params *NodesGetPollersByIDParams) (*NodesGetPollersByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetPollersByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetPollersById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/pollers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetPollersByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetPollersByIDOK), nil
}

/*
NodesGetRelations gets a nodes relations

Get the relations field of the specified node
*/
func (a *Client) NodesGetRelations(params *NodesGetRelationsParams) (*NodesGetRelationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetRelationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetRelations",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/relations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetRelationsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetRelationsOK), nil
}

/*
NodesGetSSHByID gets the ssh settings for a node

Get all of the ssh settings associated with the specified node.
*/
func (a *Client) NodesGetSSHByID(params *NodesGetSSHByIDParams) (*NodesGetSSHByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetSSHByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetSshById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/ssh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetSSHByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetSSHByIDOK), nil
}

/*
NodesGetTagsByID gets node tags

Get a list of all tags associated with the specified node.
*/
func (a *Client) NodesGetTagsByID(params *NodesGetTagsByIDParams) (*NodesGetTagsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetTagsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetTagsById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetTagsByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetTagsByIDOK), nil
}

/*
NodesGetWorkflowByID gets all workflows for a node

Get a list of all workflows that have run against the specified node, or are currently running against the node.

*/
func (a *Client) NodesGetWorkflowByID(params *NodesGetWorkflowByIDParams) (*NodesGetWorkflowByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesGetWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesGetWorkflowById",
		Method:             "GET",
		PathPattern:        "/nodes/{identifier}/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesGetWorkflowByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesGetWorkflowByIDOK), nil
}

/*
NodesMasterDelTagByID deletes nodes tag

Delete specified tag from all nodes.
*/
func (a *Client) NodesMasterDelTagByID(params *NodesMasterDelTagByIDParams) (*NodesMasterDelTagByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesMasterDelTagByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesMasterDelTagById",
		Method:             "DELETE",
		PathPattern:        "/nodes/tags/{tagName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesMasterDelTagByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesMasterDelTagByIDNoContent), nil
}

/*
NodesPatchByID patches a node

Modify the properties of the specified node.
*/
func (a *Client) NodesPatchByID(params *NodesPatchByIDParams) (*NodesPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPatchById",
		Method:             "PATCH",
		PathPattern:        "/nodes/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPatchByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPatchByIDOK), nil
}

/*
NodesPatchTagByID patches node tags

Modify the tag(s) associated with the specified node.
*/
func (a *Client) NodesPatchTagByID(params *NodesPatchTagByIDParams) (*NodesPatchTagByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPatchTagByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPatchTagById",
		Method:             "PATCH",
		PathPattern:        "/nodes/{identifier}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPatchTagByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPatchTagByIDOK), nil
}

/*
NodesPost posts a node

Create and store a new node manually.
*/
func (a *Client) NodesPost(params *NodesPostParams) (*NodesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPost",
		Method:             "POST",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPostCreated), nil
}

/*
NodesPostSSHByID posts ssh settings

Create the ssh settings associated with the specified node.
*/
func (a *Client) NodesPostSSHByID(params *NodesPostSSHByIDParams) (*NodesPostSSHByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPostSSHByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPostSshById",
		Method:             "POST",
		PathPattern:        "/nodes/{identifier}/ssh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPostSSHByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPostSSHByIDCreated), nil
}

/*
NodesPostWorkflowByID posts workflow for the node

Run a workflow against for the specified node.
*/
func (a *Client) NodesPostWorkflowByID(params *NodesPostWorkflowByIDParams) (*NodesPostWorkflowByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPostWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPostWorkflowById",
		Method:             "POST",
		PathPattern:        "/nodes/{identifier}/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPostWorkflowByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPostWorkflowByIDCreated), nil
}

/*
NodesPutObmsByNodeID puts an o b m service

Create or update the specified OBM service with the associated Node ID
*/
func (a *Client) NodesPutObmsByNodeID(params *NodesPutObmsByNodeIDParams) (*NodesPutObmsByNodeIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesPutObmsByNodeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesPutObmsByNodeId",
		Method:             "PUT",
		PathPattern:        "/nodes/{identifier}/obm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesPutObmsByNodeIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesPutObmsByNodeIDCreated), nil
}

/*
NodesWorkflowActionByID performs an action on a workflow

Perform an action on a workflow associated with a node. Currently, the cancel action is supported.

*/
func (a *Client) NodesWorkflowActionByID(params *NodesWorkflowActionByIDParams) (*NodesWorkflowActionByIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodesWorkflowActionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nodesWorkflowActionById",
		Method:             "PUT",
		PathPattern:        "/nodes/{identifier}/workflows/action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodesWorkflowActionByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NodesWorkflowActionByIDAccepted), nil
}

/*
NotificationAlertsPost publishes alerts redfish received to rack h d

Publishes alerts(redfish) received to rackHD

*/
func (a *Client) NotificationAlertsPost(params *NotificationAlertsPostParams) (*NotificationAlertsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationAlertsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notificationAlertsPost",
		Method:             "POST",
		PathPattern:        "/notification/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NotificationAlertsPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationAlertsPostCreated), nil
}

/*
ObmsDefinitionsGetAll gets list of o b m services

Get a list of OBM schemas, which define the properties required to create OBM settings.
*/
func (a *Client) ObmsDefinitionsGetAll(params *ObmsDefinitionsGetAllParams) (*ObmsDefinitionsGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsDefinitionsGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsDefinitionsGetAll",
		Method:             "GET",
		PathPattern:        "/obms/definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsDefinitionsGetAllReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsDefinitionsGetAllOK), nil
}

/*
ObmsDefinitionsGetByName gets an o b m service definition

Get the contents of the specified OBM service schema.
*/
func (a *Client) ObmsDefinitionsGetByName(params *ObmsDefinitionsGetByNameParams) (*ObmsDefinitionsGetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsDefinitionsGetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsDefinitionsGetByName",
		Method:             "GET",
		PathPattern:        "/obms/definitions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsDefinitionsGetByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsDefinitionsGetByNameOK), nil
}

/*
ObmsDeleteByID deletes o b m settings

Delete the OBM settings with the specified identifier.
*/
func (a *Client) ObmsDeleteByID(params *ObmsDeleteByIDParams) (*ObmsDeleteByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsDeleteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsDeleteById",
		Method:             "DELETE",
		PathPattern:        "/obms/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsDeleteByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsDeleteByIDNoContent), nil
}

/*
ObmsGet gets list of all o b m service instances

Get a list of all OBM settings that have been associated with nodes. OBM settings allow RackHD to communicate with the BMC of a node.

*/
func (a *Client) ObmsGet(params *ObmsGetParams) (*ObmsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsGet",
		Method:             "GET",
		PathPattern:        "/obms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsGetOK), nil
}

/*
ObmsGetByID gets an o b m service

Get the OBM settings associated with the specified identifier
*/
func (a *Client) ObmsGetByID(params *ObmsGetByIDParams) (*ObmsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsGetById",
		Method:             "GET",
		PathPattern:        "/obms/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsGetByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsGetByIDOK), nil
}

/*
ObmsPatchByID patches o b m settings

Update the properties of the OBM settings with the specified identifier.
*/
func (a *Client) ObmsPatchByID(params *ObmsPatchByIDParams) (*ObmsPatchByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsPatchByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsPatchById",
		Method:             "PATCH",
		PathPattern:        "/obms/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsPatchByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsPatchByIDOK), nil
}

/*
ObmsPostLed sets identify light status

Enable or disable identify LED on node through OBM, if supported.
*/
func (a *Client) ObmsPostLed(params *ObmsPostLedParams) (*ObmsPostLedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsPostLedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsPostLed",
		Method:             "POST",
		PathPattern:        "/obms/led",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsPostLedReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsPostLedCreated), nil
}

/*
ObmsPut puts an o b m service

Create or update the specified OBM service, and associate it with a node.
*/
func (a *Client) ObmsPut(params *ObmsPutParams) (*ObmsPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObmsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obmsPut",
		Method:             "PUT",
		PathPattern:        "/obms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ObmsPutReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ObmsPutCreated), nil
}

/*
PollersCurrentDataGet gets latest data for a poller

Get latest output data generated by the poller poller with the specified identifier.
*/
func (a *Client) PollersCurrentDataGet(params *PollersCurrentDataGetParams) (*PollersCurrentDataGetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersCurrentDataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersCurrentDataGet",
		Method:             "GET",
		PathPattern:        "/pollers/{identifier}/data/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersCurrentDataGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersCurrentDataGetNoContent), nil
}

/*
PollersDataGet gets output data for a poller

Get the complete history of output data generated by the poller with the specified identifier.

*/
func (a *Client) PollersDataGet(params *PollersDataGetParams) (*PollersDataGetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersDataGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersDataGet",
		Method:             "GET",
		PathPattern:        "/pollers/{identifier}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersDataGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersDataGetNoContent), nil
}

/*
PollersDelete deletes the specified poller

Delete the poller with the specified identifier.
*/
func (a *Client) PollersDelete(params *PollersDeleteParams) (*PollersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersDelete",
		Method:             "DELETE",
		PathPattern:        "/pollers/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersDeleteReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersDeleteNoContent), nil
}

/*
PollersGet gets a list of all active pollers

Get list of all pollers that are currently running.
*/
func (a *Client) PollersGet(params *PollersGetParams) (*PollersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersGet",
		Method:             "GET",
		PathPattern:        "/pollers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersGetOK), nil
}

/*
PollersIDGet gets the specified poller

Get information associated with the specified poller, including type, run interval, command, and whether the poller is paused.

*/
func (a *Client) PollersIDGet(params *PollersIDGetParams) (*PollersIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersIdGet",
		Method:             "GET",
		PathPattern:        "/pollers/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersIDGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersIDGetOK), nil
}

/*
PollersLibByIDGet gets the specified poller

Get the poller definition with the specified identifier from the poller library

*/
func (a *Client) PollersLibByIDGet(params *PollersLibByIDGetParams) (*PollersLibByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersLibByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersLibByIdGet",
		Method:             "GET",
		PathPattern:        "/pollers/library/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersLibByIDGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersLibByIDGetOK), nil
}

/*
PollersLibGet gets a list of possible pollers

Get a list of all available poller definitions in the poller library.
*/
func (a *Client) PollersLibGet(params *PollersLibGetParams) (*PollersLibGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersLibGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersLibGet",
		Method:             "GET",
		PathPattern:        "/pollers/library",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersLibGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersLibGetOK), nil
}

/*
PollersPatch patches a poller

Modify one or more properties of the poller with the specified identifier.
*/
func (a *Client) PollersPatch(params *PollersPatchParams) (*PollersPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersPatch",
		Method:             "PATCH",
		PathPattern:        "/pollers/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersPatchReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersPatchOK), nil
}

/*
PollersPost posts a poller

Create and start a new poller, which will run at the specified time interval.
*/
func (a *Client) PollersPost(params *PollersPostParams) (*PollersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pollersPost",
		Method:             "POST",
		PathPattern:        "/pollers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PollersPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PollersPostCreated), nil
}

/*
PostTaskByID posts a task

Start the specified task
*/
func (a *Client) PostTaskByID(params *PostTaskByIDParams) (*PostTaskByIDCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTaskByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTaskById",
		Method:             "POST",
		PathPattern:        "/tasks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTaskByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTaskByIDCreated), nil
}

/*
PostWorkflowByID posts workflow to node by tag

Start a workflow against all nodes with the specified tag.
*/
func (a *Client) PostWorkflowByID(params *PostWorkflowByIDParams) (*PostWorkflowByIDAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkflowById",
		Method:             "POST",
		PathPattern:        "/tags/{tagName}/nodes/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostWorkflowByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWorkflowByIDAccepted), nil
}

/*
ProfilesGet gets list of profiles

Get the list of currently defined profiles. Profiles are scripts used by RackHD to control how a node PXE boots.

*/
func (a *Client) ProfilesGet(params *ProfilesGetParams) (*ProfilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGet",
		Method:             "GET",
		PathPattern:        "/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetOK), nil
}

/*
ProfilesGetLibByName gets contents of a profile

Get the contents of a profile specified by its name.
*/
func (a *Client) ProfilesGetLibByName(params *ProfilesGetLibByNameParams) (*ProfilesGetLibByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetLibByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetLibByName",
		Method:             "GET",
		PathPattern:        "/profiles/library/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetLibByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetLibByNameOK), nil
}

/*
ProfilesGetMetadata gets list of profile metadata

Get the list of metadata associated with all known profiles.
*/
func (a *Client) ProfilesGetMetadata(params *ProfilesGetMetadataParams) (*ProfilesGetMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetMetadata",
		Method:             "GET",
		PathPattern:        "/profiles/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetMetadataReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetMetadataOK), nil
}

/*
ProfilesGetMetadataByName gets the specified profiles metadata from database

Get the metadata associated with the specified profile.
*/
func (a *Client) ProfilesGetMetadataByName(params *ProfilesGetMetadataByNameParams) (*ProfilesGetMetadataByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetMetadataByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetMetadataByName",
		Method:             "GET",
		PathPattern:        "/profiles/metadata/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetMetadataByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetMetadataByNameOK), nil
}

/*
ProfilesGetSwitchVendor gets a profile

Get a profile rendered with the switch vendor name.
*/
func (a *Client) ProfilesGetSwitchVendor(params *ProfilesGetSwitchVendorParams) (*ProfilesGetSwitchVendorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesGetSwitchVendorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesGetSwitchVendor",
		Method:             "GET",
		PathPattern:        "/profiles/switch/{vendor}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesGetSwitchVendorReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesGetSwitchVendorOK), nil
}

/*
ProfilesPostSwitchError posts a switch error

Manually send a switch error to the log, since most switches do not generate errors.
*/
func (a *Client) ProfilesPostSwitchError(params *ProfilesPostSwitchErrorParams) (*ProfilesPostSwitchErrorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesPostSwitchErrorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesPostSwitchError",
		Method:             "POST",
		PathPattern:        "/profiles/switch/error",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesPostSwitchErrorReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesPostSwitchErrorCreated), nil
}

/*
ProfilesPutLibByName puts a profile

Create or modify the specified profile metadata and contents.
*/
func (a *Client) ProfilesPutLibByName(params *ProfilesPutLibByNameParams) (*ProfilesPutLibByNameCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilesPutLibByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "profilesPutLibByName",
		Method:             "PUT",
		PathPattern:        "/profiles/library/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream", "application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProfilesPutLibByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProfilesPutLibByNameCreated), nil
}

/*
RemoveRole deletes a role

Delete the specified Role.
*/
func (a *Client) RemoveRole(params *RemoveRoleParams) (*RemoveRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeRole",
		Method:             "DELETE",
		PathPattern:        "/roles/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveRoleReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveRoleNoContent), nil
}

/*
RemoveUser deletes the specified user

Delete the specified user.
*/
func (a *Client) RemoveUser(params *RemoveUserParams) (*RemoveUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeUser",
		Method:             "DELETE",
		PathPattern:        "/users/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveUserNoContent), nil
}

/*
SchemasGet gets all schemas

Get a list of all schemas currently stored in the system.
*/
func (a *Client) SchemasGet(params *SchemasGetParams) (*SchemasGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchemasGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "schemasGet",
		Method:             "GET",
		PathPattern:        "/schemas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SchemasGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SchemasGetOK), nil
}

/*
SchemasIDGet gets a schema

Get the specified schema.
*/
func (a *Client) SchemasIDGet(params *SchemasIDGetParams) (*SchemasIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSchemasIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "schemasIdGet",
		Method:             "GET",
		PathPattern:        "/schemas/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SchemasIDGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SchemasIDGetOK), nil
}

/*
SkuPackPost posts a s k u pack

Create a new SKU Pack, which is used to serve the specified set of files to a node during provisioning.

*/
func (a *Client) SkuPackPost(params *SkuPackPostParams) (*SkuPackPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkuPackPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skuPackPost",
		Method:             "POST",
		PathPattern:        "/skus/pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkuPackPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkuPackPostCreated), nil
}

/*
SkusGet gets list of s k us

Get list of currently defined SKUs, which are used to group nodes based on matching a set of rules with information present in a nodes catalog.

*/
func (a *Client) SkusGet(params *SkusGetParams) (*SkusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusGet",
		Method:             "GET",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusGetOK), nil
}

/*
SkusIDDelete deletes a s k u

Delete the SKU with the specified identifier.
*/
func (a *Client) SkusIDDelete(params *SkusIDDeleteParams) (*SkusIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdDelete",
		Method:             "DELETE",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDDeleteReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDDeleteNoContent), nil
}

/*
SkusIDDeletePack deletes a s k u pack

Delete a SKU Pack associated with the specified SKU.
*/
func (a *Client) SkusIDDeletePack(params *SkusIDDeletePackParams) (*SkusIDDeletePackNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDDeletePackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdDeletePack",
		Method:             "DELETE",
		PathPattern:        "/skus/{identifier}/pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDDeletePackReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDDeletePackNoContent), nil
}

/*
SkusIDGet gets the specified s k u

Get the SKU with the specified identifier.
*/
func (a *Client) SkusIDGet(params *SkusIDGetParams) (*SkusIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdGet",
		Method:             "GET",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDGetOK), nil
}

/*
SkusIDGetNodes gets nodes for specific s k u

Get the nodes associated with the specified SKU definition.
*/
func (a *Client) SkusIDGetNodes(params *SkusIDGetNodesParams) (*SkusIDGetNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDGetNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdGetNodes",
		Method:             "GET",
		PathPattern:        "/skus/{identifier}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDGetNodesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDGetNodesOK), nil
}

/*
SkusIDPutPack puts a s k u pack to the specified s k u

Create or modify a SKU Pack, and associate the SKU Pack with the specified SKU.
*/
func (a *Client) SkusIDPutPack(params *SkusIDPutPackParams) (*SkusIDPutPackCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusIDPutPackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusIdPutPack",
		Method:             "PUT",
		PathPattern:        "/skus/{identifier}/pack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusIDPutPackReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusIDPutPackCreated), nil
}

/*
SkusPatch patches a s k u

Modify the SKU with the specified identifier.
*/
func (a *Client) SkusPatch(params *SkusPatchParams) (*SkusPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusPatch",
		Method:             "PATCH",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusPatchReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusPatchOK), nil
}

/*
SkusPost posts a s k u

Create a new SKU.
*/
func (a *Client) SkusPost(params *SkusPostParams) (*SkusPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusPost",
		Method:             "POST",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusPostCreated), nil
}

/*
SkusPut puts a s k u

Create or modify a SKU.
*/
func (a *Client) SkusPut(params *SkusPutParams) (*SkusPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkusPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "skusPut",
		Method:             "PUT",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SkusPutReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*SkusPutCreated), nil
}

/*
TaskSchemasGet gets all task schemas names

Get a list of all task schema names currently stored in the system.
*/
func (a *Client) TaskSchemasGet(params *TaskSchemasGetParams) (*TaskSchemasGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskSchemasGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taskSchemasGet",
		Method:             "GET",
		PathPattern:        "/schemas/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TaskSchemasGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaskSchemasGetOK), nil
}

/*
TaskSchemasIDGet gets a task schema

Get the specified task schema.
*/
func (a *Client) TaskSchemasIDGet(params *TaskSchemasIDGetParams) (*TaskSchemasIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskSchemasIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "taskSchemasIdGet",
		Method:             "GET",
		PathPattern:        "/schemas/tasks/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TaskSchemasIDGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaskSchemasIDGetOK), nil
}

/*
TemplatesGetByName gets the specified template

Get the template with the specified name.
*/
func (a *Client) TemplatesGetByName(params *TemplatesGetByNameParams) (*TemplatesGetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesGetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "templatesGetByName",
		Method:             "GET",
		PathPattern:        "/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesGetByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplatesGetByNameOK), nil
}

/*
TemplatesHeadByName gets headers of the specified template

Get the template headers with the specified name. Only gets headers and returns no body.
*/
func (a *Client) TemplatesHeadByName(params *TemplatesHeadByNameParams) (*TemplatesHeadByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesHeadByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "templatesHeadByName",
		Method:             "HEAD",
		PathPattern:        "/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesHeadByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplatesHeadByNameOK), nil
}

/*
TemplatesLibDelete deletes the specified template

Delete the template with the specified name.
*/
func (a *Client) TemplatesLibDelete(params *TemplatesLibDeleteParams) (*TemplatesLibDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesLibDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "templatesLibDelete",
		Method:             "DELETE",
		PathPattern:        "/templates/library/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesLibDeleteReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplatesLibDeleteNoContent), nil
}

/*
TemplatesLibGet gets the specified template

Get the contents of the specified template file.
*/
func (a *Client) TemplatesLibGet(params *TemplatesLibGetParams) (*TemplatesLibGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesLibGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "templatesLibGet",
		Method:             "GET",
		PathPattern:        "/templates/library/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesLibGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplatesLibGetOK), nil
}

/*
TemplatesLibPut creates or update the specified template

Create or update the metadata and the content of the specified template.
*/
func (a *Client) TemplatesLibPut(params *TemplatesLibPutParams) (*TemplatesLibPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesLibPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "templatesLibPut",
		Method:             "PUT",
		PathPattern:        "/templates/library/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesLibPutReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplatesLibPutCreated), nil
}

/*
TemplatesMetaGet gets a list of metadata for all templates

Retrieves metadata for each defined template. The metadata includes the template name, and scope, not the actual contents of the template.

*/
func (a *Client) TemplatesMetaGet(params *TemplatesMetaGetParams) (*TemplatesMetaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesMetaGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "templatesMetaGet",
		Method:             "GET",
		PathPattern:        "/templates/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesMetaGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplatesMetaGetOK), nil
}

/*
TemplatesMetaGetByName gets the metadata for the specified template

Get metadata for the template with the specified name.
*/
func (a *Client) TemplatesMetaGetByName(params *TemplatesMetaGetByNameParams) (*TemplatesMetaGetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplatesMetaGetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "templatesMetaGetByName",
		Method:             "GET",
		PathPattern:        "/templates/metadata/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplatesMetaGetByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplatesMetaGetByNameOK), nil
}

/*
ViewsDelete deletes the specified view

Delete a view with the specified name.
*/
func (a *Client) ViewsDelete(params *ViewsDeleteParams) (*ViewsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewViewsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "viewsDelete",
		Method:             "DELETE",
		PathPattern:        "/views/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ViewsDeleteReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ViewsDeleteNoContent), nil
}

/*
ViewsGet gets all views

Retrieve a list of all views. Views are used to render the output of various system resources, such as nodes, pollers, and OBM settings.

*/
func (a *Client) ViewsGet(params *ViewsGetParams) (*ViewsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewViewsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "viewsGet",
		Method:             "GET",
		PathPattern:        "/views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ViewsGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ViewsGetOK), nil
}

/*
ViewsGetByID gets the specified view

Get the view with the specified file name.
*/
func (a *Client) ViewsGetByID(params *ViewsGetByIDParams) (*ViewsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewViewsGetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "viewsGetById",
		Method:             "GET",
		PathPattern:        "/views/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ViewsGetByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ViewsGetByIDOK), nil
}

/*
ViewsPut puts the specified view

Create or update a view with the specified name.
*/
func (a *Client) ViewsPut(params *ViewsPutParams) (*ViewsPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewViewsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "viewsPut",
		Method:             "PUT",
		PathPattern:        "/views/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ViewsPutReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ViewsPutCreated), nil
}

/*
WorkflowsAction performs an action on the specified workflow

Perform the specified action on the workflow with the specified instance identifier. Currently, the cancel action is supported.

*/
func (a *Client) WorkflowsAction(params *WorkflowsActionParams) (*WorkflowsActionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsAction",
		Method:             "PUT",
		PathPattern:        "/workflows/{identifier}/action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsActionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsActionAccepted), nil
}

/*
WorkflowsDeleteByInstanceID deletes the specified workflow

Delete the workflow with the specified instance identifier.
*/
func (a *Client) WorkflowsDeleteByInstanceID(params *WorkflowsDeleteByInstanceIDParams) (*WorkflowsDeleteByInstanceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsDeleteByInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsDeleteByInstanceId",
		Method:             "DELETE",
		PathPattern:        "/workflows/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsDeleteByInstanceIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsDeleteByInstanceIDNoContent), nil
}

/*
WorkflowsDeleteGraphsByName deletes the specified workflow graph

Delete the workflow graph with the specified value of the injectableName property.
*/
func (a *Client) WorkflowsDeleteGraphsByName(params *WorkflowsDeleteGraphsByNameParams) (*WorkflowsDeleteGraphsByNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsDeleteGraphsByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsDeleteGraphsByName",
		Method:             "DELETE",
		PathPattern:        "/workflows/graphs/{injectableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsDeleteGraphsByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsDeleteGraphsByNameNoContent), nil
}

/*
WorkflowsDeleteTasksByName deletes the specified workflow task

Delete the workflow task with the specified value of the injectableName property.
*/
func (a *Client) WorkflowsDeleteTasksByName(params *WorkflowsDeleteTasksByNameParams) (*WorkflowsDeleteTasksByNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsDeleteTasksByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsDeleteTasksByName",
		Method:             "DELETE",
		PathPattern:        "/workflows/tasks/{injectableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsDeleteTasksByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsDeleteTasksByNameNoContent), nil
}

/*
WorkflowsGet gets a list of workflow instances

Get list workflow that have been run or are currently running.
*/
func (a *Client) WorkflowsGet(params *WorkflowsGetParams) (*WorkflowsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsGet",
		Method:             "GET",
		PathPattern:        "/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsGetReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsGetOK), nil
}

/*
WorkflowsGetAllTasks gets list of workflow tasks

Get a list of all workflow tasks that can be added to a workflow.
*/
func (a *Client) WorkflowsGetAllTasks(params *WorkflowsGetAllTasksParams) (*WorkflowsGetAllTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsGetAllTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsGetAllTasks",
		Method:             "GET",
		PathPattern:        "/workflows/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsGetAllTasksReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsGetAllTasksOK), nil
}

/*
WorkflowsGetByInstanceID gets the specified workflow

Get the workflow with the specified instance identifier.
*/
func (a *Client) WorkflowsGetByInstanceID(params *WorkflowsGetByInstanceIDParams) (*WorkflowsGetByInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsGetByInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsGetByInstanceId",
		Method:             "GET",
		PathPattern:        "/workflows/{identifier}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsGetByInstanceIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsGetByInstanceIDOK), nil
}

/*
WorkflowsGetGraphs gets list of workflow graphs

Get a list of all workflow graphs available to run.
*/
func (a *Client) WorkflowsGetGraphs(params *WorkflowsGetGraphsParams) (*WorkflowsGetGraphsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsGetGraphsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsGetGraphs",
		Method:             "GET",
		PathPattern:        "/workflows/graphs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsGetGraphsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsGetGraphsOK), nil
}

/*
WorkflowsGetGraphsByName gets the specified workflow graph

Get the workflow graph with the specified value of the injectableName property.
*/
func (a *Client) WorkflowsGetGraphsByName(params *WorkflowsGetGraphsByNameParams) (*WorkflowsGetGraphsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsGetGraphsByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsGetGraphsByName",
		Method:             "GET",
		PathPattern:        "/workflows/graphs/{injectableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsGetGraphsByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsGetGraphsByNameOK), nil
}

/*
WorkflowsGetTasksByName gets the specified workflow task

Get the task with the specified value of the injectableName property.
*/
func (a *Client) WorkflowsGetTasksByName(params *WorkflowsGetTasksByNameParams) (*WorkflowsGetTasksByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsGetTasksByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsGetTasksByName",
		Method:             "GET",
		PathPattern:        "/workflows/tasks/{injectableName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsGetTasksByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsGetTasksByNameOK), nil
}

/*
WorkflowsPost runs a workflow

Run a workflow by specifying a workflow graph injectable name. The workflow is not associated with a node.

*/
func (a *Client) WorkflowsPost(params *WorkflowsPostParams) (*WorkflowsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsPost",
		Method:             "POST",
		PathPattern:        "/workflows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsPostReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsPostCreated), nil
}

/*
WorkflowsPutGraphs puts a graph

Create or modify a workflow graph in the graph library.
*/
func (a *Client) WorkflowsPutGraphs(params *WorkflowsPutGraphsParams) (*WorkflowsPutGraphsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsPutGraphsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsPutGraphs",
		Method:             "PUT",
		PathPattern:        "/workflows/graphs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsPutGraphsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsPutGraphsCreated), nil
}

/*
WorkflowsPutTask puts a workflow task

Create or update a workflow task in the library of tasks.
*/
func (a *Client) WorkflowsPutTask(params *WorkflowsPutTaskParams) (*WorkflowsPutTaskCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkflowsPutTaskParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "workflowsPutTask",
		Method:             "PUT",
		PathPattern:        "/workflows/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkflowsPutTaskReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*WorkflowsPutTaskCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
