package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// NewWorkflowsActionParams creates a new WorkflowsActionParams object
// with the default values initialized.
func NewWorkflowsActionParams() *WorkflowsActionParams {
	var ()
	return &WorkflowsActionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWorkflowsActionParamsWithTimeout creates a new WorkflowsActionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWorkflowsActionParamsWithTimeout(timeout time.Duration) *WorkflowsActionParams {
	var ()
	return &WorkflowsActionParams{

		timeout: timeout,
	}
}

/*WorkflowsActionParams contains all the parameters to send to the API endpoint
for the workflows action operation typically these are written to a http.Request
*/
type WorkflowsActionParams struct {

	/*Action
	  The action property with the value of the desired action

	*/
	Action *models.Action
	/*Identifier
	  The workflow instance identifier

	*/
	Identifier string

	timeout time.Duration
}

// WithAction adds the action to the workflows action params
func (o *WorkflowsActionParams) WithAction(action *models.Action) *WorkflowsActionParams {
	o.Action = action
	return o
}

// WithIdentifier adds the identifier to the workflows action params
func (o *WorkflowsActionParams) WithIdentifier(identifier string) *WorkflowsActionParams {
	o.Identifier = identifier
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *WorkflowsActionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Action == nil {
		o.Action = new(models.Action)
	}

	if err := r.SetBodyParam(o.Action); err != nil {
		return err
	}

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
