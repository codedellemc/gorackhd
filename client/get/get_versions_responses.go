package get

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/emccode/gorackhd/models"
)

// GetVersionsReader is a Reader for the GetVersions structure.
type GetVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *GetVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 501:
		result := NewGetVersionsNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetVersionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewGetVersionsOK creates a GetVersionsOK with default headers values
func NewGetVersionsOK() *GetVersionsOK {
	return &GetVersionsOK{}
}

/*GetVersionsOK handles this case with default header values.

get list of all versions of all packages plus our code

*/
type GetVersionsOK struct {
	Payload GetVersionsOKBodyBody
}

func (o *GetVersionsOK) Error() string {
	return fmt.Sprintf("[GET /versions][%d] getVersionsOK  %+v", 200, o.Payload)
}

func (o *GetVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsNotImplemented creates a GetVersionsNotImplemented with default headers values
func NewGetVersionsNotImplemented() *GetVersionsNotImplemented {
	return &GetVersionsNotImplemented{}
}

/*GetVersionsNotImplemented handles this case with default header values.

Not implemented.
*/
type GetVersionsNotImplemented struct {
	Payload *models.Error
}

func (o *GetVersionsNotImplemented) Error() string {
	return fmt.Sprintf("[GET /versions][%d] getVersionsNotImplemented  %+v", 501, o.Payload)
}

func (o *GetVersionsNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsDefault creates a GetVersionsDefault with default headers values
func NewGetVersionsDefault(code int) *GetVersionsDefault {
	return &GetVersionsDefault{
		_statusCode: code,
	}
}

/*GetVersionsDefault handles this case with default header values.

Unexpected error
*/
type GetVersionsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get versions default response
func (o *GetVersionsDefault) Code() int {
	return o._statusCode
}

func (o *GetVersionsDefault) Error() string {
	return fmt.Sprintf("[GET /versions][%d] GetVersions default  %+v", o._statusCode, o.Payload)
}

func (o *GetVersionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetVersionsOKBodyBody get versions o k body body

swagger:model GetVersionsOKBodyBody
*/
type GetVersionsOKBodyBody interface{}
