package get

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPatchLookupsIDParams creates a new PatchLookupsIDParams object
// with the default values initialized.
func NewPatchLookupsIDParams() *PatchLookupsIDParams {
	var ()
	return &PatchLookupsIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchLookupsIDParamsWithTimeout creates a new PatchLookupsIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchLookupsIDParamsWithTimeout(timeout time.Duration) *PatchLookupsIDParams {
	var ()
	return &PatchLookupsIDParams{

		timeout: timeout,
	}
}

/*PatchLookupsIDParams contains all the parameters to send to the API endpoint
for the patch lookups ID operation typically these are written to a http.Request
*/
type PatchLookupsIDParams struct {

	/*Body
	  object patches to apply.


	*/
	Body interface{}
	/*ID
	  id to patch

	*/
	ID string

	timeout time.Duration
}

// WithBody adds the body to the patch lookups ID params
func (o *PatchLookupsIDParams) WithBody(body interface{}) *PatchLookupsIDParams {
	o.Body = body
	return o
}

// WithID adds the id to the patch lookups ID params
func (o *PatchLookupsIDParams) WithID(id string) *PatchLookupsIDParams {
	o.ID = id
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PatchLookupsIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
