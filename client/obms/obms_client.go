package obms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new obms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for obms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetObmsLibrary gets list of possible o b m services

get list of possible OBM services

*/
func (a *Client) GetObmsLibrary(params *GetObmsLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*GetObmsLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObmsLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetObmsLibrary",
		Method:             "GET",
		PathPattern:        "/obms/library",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetObmsLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetObmsLibraryOK), nil
}

/*
GetObmsLibraryIdentifier gets a single o b m service

get a single OBM service

*/
func (a *Client) GetObmsLibraryIdentifier(params *GetObmsLibraryIdentifierParams, authInfo runtime.ClientAuthInfoWriter) (*GetObmsLibraryIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObmsLibraryIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetObmsLibraryIdentifier",
		Method:             "GET",
		PathPattern:        "/obms/library/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetObmsLibraryIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetObmsLibraryIdentifierOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
