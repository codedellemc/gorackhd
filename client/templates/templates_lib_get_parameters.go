package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTemplatesLibGetParams creates a new TemplatesLibGetParams object
// with the default values initialized.
func NewTemplatesLibGetParams() *TemplatesLibGetParams {
	var (
		scopeDefault = string("global")
	)
	return &TemplatesLibGetParams{
		Scope: &scopeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTemplatesLibGetParamsWithTimeout creates a new TemplatesLibGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTemplatesLibGetParamsWithTimeout(timeout time.Duration) *TemplatesLibGetParams {
	var (
		scopeDefault string = string("global")
	)
	return &TemplatesLibGetParams{
		Scope: &scopeDefault,

		timeout: timeout,
	}
}

/*TemplatesLibGetParams contains all the parameters to send to the API endpoint
for the templates lib get operation typically these are written to a http.Request
*/
type TemplatesLibGetParams struct {

	/*Name
	  The file name of the template

	*/
	Name string
	/*Scope
	  The template scope

	*/
	Scope *string

	timeout time.Duration
}

// WithName adds the name to the templates lib get params
func (o *TemplatesLibGetParams) WithName(name string) *TemplatesLibGetParams {
	o.Name = name
	return o
}

// WithScope adds the scope to the templates lib get params
func (o *TemplatesLibGetParams) WithScope(scope *string) *TemplatesLibGetParams {
	o.Scope = scope
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *TemplatesLibGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
