package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPollersIdentifierData gets data for the specific poller

Get data for the specific poller

*/
func (a *Client) GetPollersIdentifierData(params *GetPollersIdentifierDataParams, authInfo runtime.ClientAuthInfoWriter) (*GetPollersIdentifierDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollersIdentifierDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPollersIdentifierData",
		Method:             "GET",
		PathPattern:        "/pollers/{identifier}/data",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPollersIdentifierDataReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPollersIdentifierDataOK), nil
}

/*
GetTemplatesLibrary gets list of possible templates

get list of possible templates

*/
func (a *Client) GetTemplatesLibrary(params *GetTemplatesLibraryParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplatesLibraryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesLibraryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTemplatesLibrary",
		Method:             "GET",
		PathPattern:        "/templates/library",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesLibraryReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesLibraryOK), nil
}

/*
GetTemplatesLibraryIdentifier gets a single template

get a single template

*/
func (a *Client) GetTemplatesLibraryIdentifier(params *GetTemplatesLibraryIdentifierParams, authInfo runtime.ClientAuthInfoWriter) (*GetTemplatesLibraryIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesLibraryIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTemplatesLibraryIdentifier",
		Method:             "GET",
		PathPattern:        "/templates/library/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesLibraryIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesLibraryIdentifierOK), nil
}

/*
PutTemplatesLibraryIdentifier puts a single template

put a single template

*/
func (a *Client) PutTemplatesLibraryIdentifier(params *PutTemplatesLibraryIdentifierParams, authInfo runtime.ClientAuthInfoWriter) (*PutTemplatesLibraryIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTemplatesLibraryIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTemplatesLibraryIdentifier",
		Method:             "PUT",
		PathPattern:        "/templates/library/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutTemplatesLibraryIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTemplatesLibraryIdentifierOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
