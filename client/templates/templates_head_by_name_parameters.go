package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTemplatesHeadByNameParams creates a new TemplatesHeadByNameParams object
// with the default values initialized.
func NewTemplatesHeadByNameParams() *TemplatesHeadByNameParams {
	var ()
	return &TemplatesHeadByNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTemplatesHeadByNameParamsWithTimeout creates a new TemplatesHeadByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTemplatesHeadByNameParamsWithTimeout(timeout time.Duration) *TemplatesHeadByNameParams {
	var ()
	return &TemplatesHeadByNameParams{

		timeout: timeout,
	}
}

/*TemplatesHeadByNameParams contains all the parameters to send to the API endpoint
for the templates head by name operation typically these are written to a http.Request
*/
type TemplatesHeadByNameParams struct {

	/*Macs
	  List of valid MAC addresses to lookup

	*/
	Macs []string
	/*Name
	  The name of the template

	*/
	Name string
	/*NodeID
	  The node identifier

	*/
	NodeID *string

	timeout time.Duration
}

// WithMacs adds the macs to the templates head by name params
func (o *TemplatesHeadByNameParams) WithMacs(macs []string) *TemplatesHeadByNameParams {
	o.Macs = macs
	return o
}

// WithName adds the name to the templates head by name params
func (o *TemplatesHeadByNameParams) WithName(name string) *TemplatesHeadByNameParams {
	o.Name = name
	return o
}

// WithNodeID adds the nodeID to the templates head by name params
func (o *TemplatesHeadByNameParams) WithNodeID(nodeID *string) *TemplatesHeadByNameParams {
	o.NodeID = nodeID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *TemplatesHeadByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	valuesMacs := o.Macs

	joinedMacs := swag.JoinByFormat(valuesMacs, "multi")
	// query array param macs
	if err := r.SetQueryParam("macs", joinedMacs...); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.NodeID != nil {

		// query param nodeId
		var qrNodeID string
		if o.NodeID != nil {
			qrNodeID = *o.NodeID
		}
		qNodeID := qrNodeID
		if qNodeID != "" {
			if err := r.SetQueryParam("nodeId", qNodeID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
