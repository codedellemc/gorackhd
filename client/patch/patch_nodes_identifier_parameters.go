package patch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPatchNodesIdentifierParams creates a new PatchNodesIdentifierParams object
// with the default values initialized.
func NewPatchNodesIdentifierParams() *PatchNodesIdentifierParams {
	var ()
	return &PatchNodesIdentifierParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchNodesIdentifierParamsWithTimeout creates a new PatchNodesIdentifierParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchNodesIdentifierParamsWithTimeout(timeout time.Duration) *PatchNodesIdentifierParams {
	var ()
	return &PatchNodesIdentifierParams{

		timeout: timeout,
	}
}

/*PatchNodesIdentifierParams contains all the parameters to send to the API endpoint
for the patch nodes identifier operation typically these are written to a http.Request
*/
type PatchNodesIdentifierParams struct {

	/*Body
	  object patches to apply.


	*/
	Body interface{}
	/*Identifier
	  Mac addresses and unique aliases to identify the node by, |
	expect a string or an array of strings.


	*/
	Identifier string

	timeout time.Duration
}

// WithBody adds the body to the patch nodes identifier params
func (o *PatchNodesIdentifierParams) WithBody(body interface{}) *PatchNodesIdentifierParams {
	o.Body = body
	return o
}

// WithIdentifier adds the identifier to the patch nodes identifier params
func (o *PatchNodesIdentifierParams) WithIdentifier(identifier string) *PatchNodesIdentifierParams {
	o.Identifier = identifier
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PatchNodesIdentifierParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param identifier
	if err := r.SetPathParam("identifier", o.Identifier); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
