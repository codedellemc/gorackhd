package post

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new post API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for post API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PostLookups finds all

put all

*/
func (a *Client) PostLookups(params *PostLookupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostLookupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLookupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLookups",
		Method:             "POST",
		PathPattern:        "/lookups",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLookupsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLookupsOK), nil
}

/*
PostLookupsID posts id

post id

*/
func (a *Client) PostLookupsID(params *PostLookupsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostLookupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLookupsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLookupsID",
		Method:             "POST",
		PathPattern:        "/lookups/{id}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLookupsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLookupsIDOK), nil
}

/*
PostNodes posts

post

*/
func (a *Client) PostNodes(params *PostNodesParams, authInfo runtime.ClientAuthInfoWriter) (*PostNodesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodes",
		Method:             "POST",
		PathPattern:        "/nodes",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesCreated), nil
}

/*
PostNodesIdentifierObm sets the obm settings associated with a node

set he obm settings associated with a node.

*/
func (a *Client) PostNodesIdentifierObm(params *PostNodesIdentifierObmParams, authInfo runtime.ClientAuthInfoWriter) (*PostNodesIdentifierObmCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierObmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodesIdentifierObm",
		Method:             "POST",
		PathPattern:        "/nodes/{identifier}/obm",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNodesIdentifierObmReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierObmCreated), nil
}

/*
PostNodesIdentifierObmIdentify enables or disable identify light on node through o b m if supported

Enable or disable identify light on node through OBM (if supported)

*/
func (a *Client) PostNodesIdentifierObmIdentify(params *PostNodesIdentifierObmIdentifyParams, authInfo runtime.ClientAuthInfoWriter) (*PostNodesIdentifierObmIdentifyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierObmIdentifyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodesIdentifierObmIdentify",
		Method:             "POST",
		PathPattern:        "/nodes/{identifier}/obm/identify",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNodesIdentifierObmIdentifyReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierObmIdentifyCreated), nil
}

/*
PostNodesIdentifierWorkflows creates workflow for specified node

create workflow for specified node

*/
func (a *Client) PostNodesIdentifierWorkflows(params *PostNodesIdentifierWorkflowsParams, authInfo runtime.ClientAuthInfoWriter) (*PostNodesIdentifierWorkflowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesIdentifierWorkflowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodesIdentifierWorkflows",
		Method:             "POST",
		PathPattern:        "/nodes/{identifier}/workflows",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNodesIdentifierWorkflowsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesIdentifierWorkflowsOK), nil
}

/*
PostNodesMacaddressDhcpWhitelist adds a whitelist of specified mac address

Add a whitelist of specified mac address

*/
func (a *Client) PostNodesMacaddressDhcpWhitelist(params *PostNodesMacaddressDhcpWhitelistParams, authInfo runtime.ClientAuthInfoWriter) (*PostNodesMacaddressDhcpWhitelistCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodesMacaddressDhcpWhitelist",
		Method:             "POST",
		PathPattern:        "/nodes/{macaddress}/dhcp/whitelist",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNodesMacaddressDhcpWhitelistReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesMacaddressDhcpWhitelistCreated), nil
}

/*
PostSkus creates a sku

create a sku

*/
func (a *Client) PostSkus(params *PostSkusParams, authInfo runtime.ClientAuthInfoWriter) (*PostSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSkus",
		Method:             "POST",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSkusOK), nil
}

/*
PutFilesFileidentifier puts file based on filename

Put file based on filename, returns the uuid of the stored file.

*/
func (a *Client) PutFilesFileidentifier(params *PutFilesFileidentifierParams, authInfo runtime.ClientAuthInfoWriter) (*PutFilesFileidentifierCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFilesFileidentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutFilesFileidentifier",
		Method:             "PUT",
		PathPattern:        "/files/{fileidentifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutFilesFileidentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutFilesFileidentifierCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
