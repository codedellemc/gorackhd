package dhcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dhcp API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDhcpLeaseMac gets list of all catalogs

Delete the lease for the mac specified and return information about deleted lease.

*/
func (a *Client) DeleteDhcpLeaseMac(params *DeleteDhcpLeaseMacParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteDhcpLeaseMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpLeaseMacParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDhcpLeaseMac",
		Method:             "DELETE",
		PathPattern:        "/dhcp/lease/{mac}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDhcpLeaseMacReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDhcpLeaseMacOK), nil
}

/*
DeleteNodesMacaddressDhcpWhitelist removes a whitelist of specified mac address

Remove a whitelist of specified mac address

*/
func (a *Client) DeleteNodesMacaddressDhcpWhitelist(params *DeleteNodesMacaddressDhcpWhitelistParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNodesMacaddressDhcpWhitelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteNodesMacaddressDhcpWhitelist",
		Method:             "DELETE",
		PathPattern:        "/nodes/{macaddress}/dhcp/whitelist",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNodesMacaddressDhcpWhitelistReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNodesMacaddressDhcpWhitelistNoContent), nil
}

/*
GetDhcp gets d h c p lease table

Fetch the dhcp leases.

*/
func (a *Client) GetDhcp(params *GetDhcpParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDhcp",
		Method:             "GET",
		PathPattern:        "/dhcp",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDhcpReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpOK), nil
}

/*
GetDhcpLeaseMac fetches lease information for the mac specified

Fetch lease information for the mac specified.

*/
func (a *Client) GetDhcpLeaseMac(params *GetDhcpLeaseMacParams, authInfo runtime.ClientAuthInfoWriter) (*GetDhcpLeaseMacOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpLeaseMacParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDhcpLeaseMac",
		Method:             "GET",
		PathPattern:        "/dhcp/lease/{mac}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDhcpLeaseMacReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDhcpLeaseMacOK), nil
}

/*
PostNodesMacaddressDhcpWhitelist adds a whitelist of specified mac address

Add a whitelist of specified mac address

*/
func (a *Client) PostNodesMacaddressDhcpWhitelist(params *PostNodesMacaddressDhcpWhitelistParams, authInfo runtime.ClientAuthInfoWriter) (*PostNodesMacaddressDhcpWhitelistCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNodesMacaddressDhcpWhitelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNodesMacaddressDhcpWhitelist",
		Method:             "POST",
		PathPattern:        "/nodes/{macaddress}/dhcp/whitelist",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostNodesMacaddressDhcpWhitelistReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNodesMacaddressDhcpWhitelistCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
