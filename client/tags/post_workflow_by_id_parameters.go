package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/spiegela/gorackhd/models"
)

// NewPostWorkflowByIDParams creates a new PostWorkflowByIDParams object
// with the default values initialized.
func NewPostWorkflowByIDParams() *PostWorkflowByIDParams {
	var ()
	return &PostWorkflowByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostWorkflowByIDParamsWithTimeout creates a new PostWorkflowByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostWorkflowByIDParamsWithTimeout(timeout time.Duration) *PostWorkflowByIDParams {
	var ()
	return &PostWorkflowByIDParams{

		timeout: timeout,
	}
}

/*PostWorkflowByIDParams contains all the parameters to send to the API endpoint
for the post workflow by Id operation typically these are written to a http.Request
*/
type PostWorkflowByIDParams struct {

	/*Body
	  The workflow options to post

	*/
	Body *models.PostNodeWorkflow
	/*Name
	  Query string specifying the optional workflow injectable name

	*/
	Name *string
	/*TagName
	  The tag identifier

	*/
	TagName string

	timeout time.Duration
}

// WithBody adds the body to the post workflow by Id params
func (o *PostWorkflowByIDParams) WithBody(body *models.PostNodeWorkflow) *PostWorkflowByIDParams {
	o.Body = body
	return o
}

// WithName adds the name to the post workflow by Id params
func (o *PostWorkflowByIDParams) WithName(name *string) *PostWorkflowByIDParams {
	o.Name = name
	return o
}

// WithTagName adds the tagName to the post workflow by Id params
func (o *PostWorkflowByIDParams) WithTagName(tagName string) *PostWorkflowByIDParams {
	o.TagName = tagName
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PostWorkflowByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Body == nil {
		o.Body = new(models.PostNodeWorkflow)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	// path param tagName
	if err := r.SetPathParam("tagName", o.TagName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
