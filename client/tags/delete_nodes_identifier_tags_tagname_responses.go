package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/codedellemc/gorackhd/models"
)

// DeleteNodesIdentifierTagsTagnameReader is a Reader for the DeleteNodesIdentifierTagsTagname structure.
type DeleteNodesIdentifierTagsTagnameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *DeleteNodesIdentifierTagsTagnameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteNodesIdentifierTagsTagnameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteNodesIdentifierTagsTagnameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteNodesIdentifierTagsTagnameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewDeleteNodesIdentifierTagsTagnameOK creates a DeleteNodesIdentifierTagsTagnameOK with default headers values
func NewDeleteNodesIdentifierTagsTagnameOK() *DeleteNodesIdentifierTagsTagnameOK {
	return &DeleteNodesIdentifierTagsTagnameOK{}
}

/*DeleteNodesIdentifierTagsTagnameOK handles this case with default header values.

Delete successful
*/
type DeleteNodesIdentifierTagsTagnameOK struct {
}

func (o *DeleteNodesIdentifierTagsTagnameOK) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{identifier}/tags/{tagname}][%d] deleteNodesIdentifierTagsTagnameOK ", 200)
}

func (o *DeleteNodesIdentifierTagsTagnameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNodesIdentifierTagsTagnameNotFound creates a DeleteNodesIdentifierTagsTagnameNotFound with default headers values
func NewDeleteNodesIdentifierTagsTagnameNotFound() *DeleteNodesIdentifierTagsTagnameNotFound {
	return &DeleteNodesIdentifierTagsTagnameNotFound{}
}

/*DeleteNodesIdentifierTagsTagnameNotFound handles this case with default header values.

The node with the identifier was not found.
*/
type DeleteNodesIdentifierTagsTagnameNotFound struct {
	Payload *models.Error
}

func (o *DeleteNodesIdentifierTagsTagnameNotFound) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{identifier}/tags/{tagname}][%d] deleteNodesIdentifierTagsTagnameNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNodesIdentifierTagsTagnameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNodesIdentifierTagsTagnameDefault creates a DeleteNodesIdentifierTagsTagnameDefault with default headers values
func NewDeleteNodesIdentifierTagsTagnameDefault(code int) *DeleteNodesIdentifierTagsTagnameDefault {
	return &DeleteNodesIdentifierTagsTagnameDefault{
		_statusCode: code,
	}
}

/*DeleteNodesIdentifierTagsTagnameDefault handles this case with default header values.

Unexpected error
*/
type DeleteNodesIdentifierTagsTagnameDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete nodes identifier tags tagname default response
func (o *DeleteNodesIdentifierTagsTagnameDefault) Code() int {
	return o._statusCode
}

func (o *DeleteNodesIdentifierTagsTagnameDefault) Error() string {
	return fmt.Sprintf("[DELETE /nodes/{identifier}/tags/{tagname}][%d] DeleteNodesIdentifierTagsTagname default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteNodesIdentifierTagsTagnameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
