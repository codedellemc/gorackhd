package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/codedellemc/gorackhd/models"
)

// PatchNodesIdentifierReader is a Reader for the PatchNodesIdentifier structure.
type PatchNodesIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PatchNodesIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchNodesIdentifierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPatchNodesIdentifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPatchNodesIdentifierDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewPatchNodesIdentifierOK creates a PatchNodesIdentifierOK with default headers values
func NewPatchNodesIdentifierOK() *PatchNodesIdentifierOK {
	return &PatchNodesIdentifierOK{}
}

/*PatchNodesIdentifierOK handles this case with default header values.

patch succeeded
*/
type PatchNodesIdentifierOK struct {
	Payload *models.Node
}

func (o *PatchNodesIdentifierOK) Error() string {
	return fmt.Sprintf("[PATCH /nodes/{identifier}][%d] patchNodesIdentifierOK  %+v", 200, o.Payload)
}

func (o *PatchNodesIdentifierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Node)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNodesIdentifierNotFound creates a PatchNodesIdentifierNotFound with default headers values
func NewPatchNodesIdentifierNotFound() *PatchNodesIdentifierNotFound {
	return &PatchNodesIdentifierNotFound{}
}

/*PatchNodesIdentifierNotFound handles this case with default header values.

Not found
*/
type PatchNodesIdentifierNotFound struct {
	Payload *models.Error
}

func (o *PatchNodesIdentifierNotFound) Error() string {
	return fmt.Sprintf("[PATCH /nodes/{identifier}][%d] patchNodesIdentifierNotFound  %+v", 404, o.Payload)
}

func (o *PatchNodesIdentifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchNodesIdentifierDefault creates a PatchNodesIdentifierDefault with default headers values
func NewPatchNodesIdentifierDefault(code int) *PatchNodesIdentifierDefault {
	return &PatchNodesIdentifierDefault{
		_statusCode: code,
	}
}

/*PatchNodesIdentifierDefault handles this case with default header values.

Unexpected error
*/
type PatchNodesIdentifierDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the patch nodes identifier default response
func (o *PatchNodesIdentifierDefault) Code() int {
	return o._statusCode
}

func (o *PatchNodesIdentifierDefault) Error() string {
	return fmt.Sprintf("[PATCH /nodes/{identifier}][%d] PatchNodesIdentifier default  %+v", o._statusCode, o.Payload)
}

func (o *PatchNodesIdentifierDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
