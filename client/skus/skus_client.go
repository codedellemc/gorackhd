package skus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new skus API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for skus API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSkus gets list of skus

get list of skus

*/
func (a *Client) GetSkus(params *GetSkusParams, authInfo runtime.ClientAuthInfoWriter) (*GetSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSkus",
		Method:             "GET",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSkusOK), nil
}

/*
GetSkusIdentifier gets a single sku

get a single sku

*/
func (a *Client) GetSkusIdentifier(params *GetSkusIdentifierParams, authInfo runtime.ClientAuthInfoWriter) (*GetSkusIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSkusIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSkusIdentifier",
		Method:             "GET",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSkusIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSkusIdentifierOK), nil
}

/*
GetSkusIdentifierNodes gets nodes for specific sku

get nodes for specific sku

*/
func (a *Client) GetSkusIdentifierNodes(params *GetSkusIdentifierNodesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSkusIdentifierNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSkusIdentifierNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSkusIdentifierNodes",
		Method:             "GET",
		PathPattern:        "/skus/{identifier}/nodes",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSkusIdentifierNodesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSkusIdentifierNodesOK), nil
}

/*
PatchSkusIdentifier patches a single sku

patch a single sku

*/
func (a *Client) PatchSkusIdentifier(params *PatchSkusIdentifierParams, authInfo runtime.ClientAuthInfoWriter) (*PatchSkusIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSkusIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchSkusIdentifier",
		Method:             "PATCH",
		PathPattern:        "/skus/{identifier}",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchSkusIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSkusIdentifierOK), nil
}

/*
PostSkus creates a sku

create a sku

*/
func (a *Client) PostSkus(params *PostSkusParams, authInfo runtime.ClientAuthInfoWriter) (*PostSkusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSkusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSkus",
		Method:             "POST",
		PathPattern:        "/skus",
		ProducesMediaTypes: []string{"application/json", "application/x-gzip"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSkusReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSkusOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
