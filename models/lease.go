package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Lease lease

swagger:model lease
*/
type Lease struct {

	/* bound flag
	 */
	BoundFlag bool `json:"boundFlag,omitempty"`

	/* expiration timer
	 */
	ExpirationTimer int32 `json:"expirationTimer,omitempty"`

	/* ip address

	Required: true
	*/
	IPAddress *string `json:"ipAddress"`

	/* lease expires at
	 */
	LeaseExpiresAt int64 `json:"leaseExpiresAt,omitempty"`

	/* mac

	Required: true
	*/
	Mac *string `json:"mac"`

	/* rebind expires at
	 */
	RebindExpiresAt int64 `json:"rebindExpiresAt,omitempty"`

	/* rebinding timer
	 */
	RebindingTimer int32 `json:"rebindingTimer,omitempty"`

	/* renewal expires at
	 */
	RenewalExpiresAt int64 `json:"renewalExpiresAt,omitempty"`

	/* renewal timer
	 */
	RenewalTimer int32 `json:"renewalTimer,omitempty"`

	/* reservation expires at
	 */
	ReservationExpiresAt int64 `json:"reservationExpiresAt,omitempty"`

	/* reservation timer
	 */
	ReservationTimer int32 `json:"reservationTimer,omitempty"`

	/* reserve timer
	 */
	ReserveTimer int64 `json:"reserveTimer,omitempty"`

	/* reserved flag
	 */
	ReservedFlag bool `json:"reservedFlag,omitempty"`
}

// Validate validates this lease
func (m *Lease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lease) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ipAddress", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *Lease) validateMac(formats strfmt.Registry) error {

	if err := validate.Required("mac", "body", m.Mac); err != nil {
		return err
	}

	return nil
}
