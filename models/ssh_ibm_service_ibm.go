// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SSHIbmServiceIbm SSH settings
// swagger:model ssh-ibm-service_Ibm

type SSHIbmServiceIbm struct {

	// config
	// Required: true
	Config *SSHIbmServiceIbmConfig `json:"config"`

	// node Id
	NodeID string `json:"nodeId,omitempty"`

	// service
	// Required: true
	Service *string `json:"service"`
}

/* polymorph ssh-ibm-service_Ibm config false */

/* polymorph ssh-ibm-service_Ibm nodeId false */

/* polymorph ssh-ibm-service_Ibm service false */

// Validate validates this ssh ibm service ibm
func (m *SSHIbmServiceIbm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSHIbmServiceIbm) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {

		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *SSHIbmServiceIbm) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SSHIbmServiceIbm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SSHIbmServiceIbm) UnmarshalBinary(b []byte) error {
	var res SSHIbmServiceIbm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
