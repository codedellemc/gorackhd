// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodesPostObmByID OBM settings
// swagger:model nodes_post_obm_by_id

type NodesPostObmByID struct {

	// config
	// Required: true
	Config interface{} `json:"config"`

	// node Id
	// Required: true
	NodeID *string `json:"nodeId"`

	// service
	// Required: true
	Service *string `json:"service"`
}

/* polymorph nodes_post_obm_by_id config false */

/* polymorph nodes_post_obm_by_id nodeId false */

/* polymorph nodes_post_obm_by_id service false */

// Validate validates this nodes post obm by id
func (m *NodesPostObmByID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodesPostObmByID) validateConfig(formats strfmt.Registry) error {

	return nil
}

func (m *NodesPostObmByID) validateNodeID(formats strfmt.Registry) error {

	if err := validate.Required("nodeId", "body", m.NodeID); err != nil {
		return err
	}

	return nil
}

func (m *NodesPostObmByID) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodesPostObmByID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodesPostObmByID) UnmarshalBinary(b []byte) error {
	var res NodesPostObmByID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
