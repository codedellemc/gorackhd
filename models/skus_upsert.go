// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SkusUpsert A sku for RackHD
// swagger:model SkusUpsert

type SkusUpsert struct {

	// discovery graph name
	// Min Length: 1
	DiscoveryGraphName string `json:"discoveryGraphName,omitempty"`

	// discovery graph options
	DiscoveryGraphOptions interface{} `json:"discoveryGraphOptions,omitempty"`

	// name
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// rules
	Rules SkusUpsertRules `json:"rules"`
}

/* polymorph SkusUpsert discoveryGraphName false */

/* polymorph SkusUpsert discoveryGraphOptions false */

/* polymorph SkusUpsert name false */

/* polymorph SkusUpsert rules false */

// Validate validates this skus upsert
func (m *SkusUpsert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscoveryGraphName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkusUpsert) validateDiscoveryGraphName(formats strfmt.Registry) error {

	if swag.IsZero(m.DiscoveryGraphName) { // not required
		return nil
	}

	if err := validate.MinLength("discoveryGraphName", "body", string(m.DiscoveryGraphName), 1); err != nil {
		return err
	}

	return nil
}

func (m *SkusUpsert) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SkusUpsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SkusUpsert) UnmarshalBinary(b []byte) error {
	var res SkusUpsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
