package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Catalog catalog

swagger:model catalog
*/
type Catalog struct {

	/* arbitrary json object
	 */
	Data interface{} `json:"data,omitempty"`

	/* id

	Required: true
	*/
	ID *string `json:"id"`

	/* node

	Required: true
	*/
	Node *Node `json:"node"`

	/* source

	Required: true
	*/
	Source *string `json:"source"`
}

// Validate validates this catalog
func (m *Catalog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Catalog) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Catalog) validateNode(formats strfmt.Registry) error {

	if err := validate.Required("node", "body", m.Node); err != nil {
		return err
	}

	if m.Node != nil {

		if err := m.Node.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Catalog) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}
