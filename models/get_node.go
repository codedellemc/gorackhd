// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetNode Get a node from RackHD
// swagger:model GetNode

type GetNode struct {

	// auto discover
	AutoDiscover string `json:"autoDiscover,omitempty"`

	// boot settings
	BootSettings interface{} `json:"bootSettings,omitempty"`

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// identifiers
	Identifiers []string `json:"identifiers"`

	// Name of the node
	Name string `json:"name,omitempty"`

	// obms
	Obms GetNodeObms `json:"obms"`

	// relations
	Relations GetNodeRelations `json:"relations"`

	// tags
	Tags string `json:"tags,omitempty"`

	// Type of node
	Type string `json:"type,omitempty"`
}

/* polymorph GetNode autoDiscover false */

/* polymorph GetNode bootSettings false */

/* polymorph GetNode identifier false */

/* polymorph GetNode identifiers false */

/* polymorph GetNode name false */

/* polymorph GetNode obms false */

/* polymorph GetNode relations false */

/* polymorph GetNode tags false */

/* polymorph GetNode type false */

// Validate validates this get node
func (m *GetNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifiers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetNode) validateIdentifiers(formats strfmt.Registry) error {

	if swag.IsZero(m.Identifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Identifiers); i++ {

	}

	return nil
}

var getNodeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compute","compute-container","switch","dae","pdu","mgmt","enclosure","rack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getNodeTypeTypePropEnum = append(getNodeTypeTypePropEnum, v)
	}
}

const (
	// GetNodeTypeCompute captures enum value "compute"
	GetNodeTypeCompute string = "compute"
	// GetNodeTypeComputeContainer captures enum value "compute-container"
	GetNodeTypeComputeContainer string = "compute-container"
	// GetNodeTypeSwitch captures enum value "switch"
	GetNodeTypeSwitch string = "switch"
	// GetNodeTypeDae captures enum value "dae"
	GetNodeTypeDae string = "dae"
	// GetNodeTypePdu captures enum value "pdu"
	GetNodeTypePdu string = "pdu"
	// GetNodeTypeMgmt captures enum value "mgmt"
	GetNodeTypeMgmt string = "mgmt"
	// GetNodeTypeEnclosure captures enum value "enclosure"
	GetNodeTypeEnclosure string = "enclosure"
	// GetNodeTypeRack captures enum value "rack"
	GetNodeTypeRack string = "rack"
)

// prop value enum
func (m *GetNode) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getNodeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GetNode) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetNode) UnmarshalBinary(b []byte) error {
	var res GetNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
