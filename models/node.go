package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Node node

swagger:model node
*/
type Node struct {

	/* catalogs
	 */
	Catalogs []*Catalog `json:"catalogs,omitempty"`

	/* id
	 */
	ID string `json:"id,omitempty"`

	/* ip addresses
	 */
	IPAddresses interface{} `json:"ipAddresses,omitempty"`

	/* name

	Required: true
	*/
	Name *string `json:"name"`

	/* obm settings
	 */
	ObmSettings interface{} `json:"obmSettings,omitempty"`

	/* profile

	Required: true
	*/
	Profile *string `json:"profile"`

	/* sku
	 */
	Sku *Sku `json:"sku,omitempty"`

	/* workflows
	 */
	Workflows []*Graphobject `json:"workflows,omitempty"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCatalogs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProfile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflows(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateCatalogs(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalogs) { // not required
		return nil
	}

	return nil
}

func (m *Node) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateProfile(formats strfmt.Registry) error {

	if err := validate.Required("profile", "body", m.Profile); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateWorkflows(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflows) { // not required
		return nil
	}

	return nil
}
