package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Node node

swagger:model node
*/
type Node struct {

	/* auto discover
	 */
	AutoDiscover bool `json:"autoDiscover,omitempty"`

	/* boot settings
	 */
	BootSettings interface{} `json:"bootSettings,omitempty"`

	/* catalogs
	 */
	Catalogs []*Catalog `json:"catalogs,omitempty"`

	/* id
	 */
	ID string `json:"id,omitempty"`

	/* name

	Required: true
	*/
	Name *string `json:"name"`

	/* obm settings
	 */
	ObmSettings []interface{} `json:"obmSettings,omitempty"`

	/* relations
	 */
	Relations []interface{} `json:"relations,omitempty"`

	/* sku
	 */
	Sku string `json:"sku,omitempty"`

	/* snmp settings
	 */
	SnmpSettings interface{} `json:"snmpSettings,omitempty"`

	/* ssh settings
	 */
	SSHSettings interface{} `json:"sshSettings,omitempty"`

	/* tags
	 */
	Tags []interface{} `json:"tags,omitempty"`

	/* type
	 */
	Type string `json:"type,omitempty"`

	/* workflows
	 */
	Workflows []*Graphobject `json:"workflows,omitempty"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCatalogs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkflows(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateCatalogs(formats strfmt.Registry) error {

	if swag.IsZero(m.Catalogs) { // not required
		return nil
	}

	for i := 0; i < len(m.Catalogs); i++ {

		if swag.IsZero(m.Catalogs[i]) { // not required
			continue
		}

		if m.Catalogs[i] != nil {

			if err := m.Catalogs[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Node) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Node) validateWorkflows(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflows) { // not required
		return nil
	}

	for i := 0; i < len(m.Workflows); i++ {

		if swag.IsZero(m.Workflows[i]) { // not required
			continue
		}

		if m.Workflows[i] != nil {

			if err := m.Workflows[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
