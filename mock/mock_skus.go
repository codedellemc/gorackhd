// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiegela/gorackhd/rackhd (interfaces: SkuIface)

// Package mock is a generated GoMock package.
package mock

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	skus "github.com/spiegela/gorackhd/client/skus"
	reflect "reflect"
)

// MockSkuIface is a mock of SkuIface interface
type MockSkuIface struct {
	ctrl     *gomock.Controller
	recorder *MockSkuIfaceMockRecorder
}

// MockSkuIfaceMockRecorder is the mock recorder for MockSkuIface
type MockSkuIfaceMockRecorder struct {
	mock *MockSkuIface
}

// NewMockSkuIface creates a new mock instance
func NewMockSkuIface(ctrl *gomock.Controller) *MockSkuIface {
	mock := &MockSkuIface{ctrl: ctrl}
	mock.recorder = &MockSkuIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSkuIface) EXPECT() *MockSkuIfaceMockRecorder {
	return m.recorder
}

// SkuPackPost mocks base method
func (m *MockSkuIface) SkuPackPost(arg0 *skus.SkuPackPostParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkuPackPostCreated, error) {
	ret := m.ctrl.Call(m, "SkuPackPost", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkuPackPostCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkuPackPost indicates an expected call of SkuPackPost
func (mr *MockSkuIfaceMockRecorder) SkuPackPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkuPackPost", reflect.TypeOf((*MockSkuIface)(nil).SkuPackPost), arg0, arg1)
}

// SkusGet mocks base method
func (m *MockSkuIface) SkusGet(arg0 *skus.SkusGetParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusGetOK, error) {
	ret := m.ctrl.Call(m, "SkusGet", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusGet indicates an expected call of SkusGet
func (mr *MockSkuIfaceMockRecorder) SkusGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusGet", reflect.TypeOf((*MockSkuIface)(nil).SkusGet), arg0, arg1)
}

// SkusIDDelete mocks base method
func (m *MockSkuIface) SkusIDDelete(arg0 *skus.SkusIDDeleteParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusIDDeleteNoContent, error) {
	ret := m.ctrl.Call(m, "SkusIDDelete", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusIDDeleteNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusIDDelete indicates an expected call of SkusIDDelete
func (mr *MockSkuIfaceMockRecorder) SkusIDDelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusIDDelete", reflect.TypeOf((*MockSkuIface)(nil).SkusIDDelete), arg0, arg1)
}

// SkusIDDeletePack mocks base method
func (m *MockSkuIface) SkusIDDeletePack(arg0 *skus.SkusIDDeletePackParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusIDDeletePackNoContent, error) {
	ret := m.ctrl.Call(m, "SkusIDDeletePack", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusIDDeletePackNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusIDDeletePack indicates an expected call of SkusIDDeletePack
func (mr *MockSkuIfaceMockRecorder) SkusIDDeletePack(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusIDDeletePack", reflect.TypeOf((*MockSkuIface)(nil).SkusIDDeletePack), arg0, arg1)
}

// SkusIDGet mocks base method
func (m *MockSkuIface) SkusIDGet(arg0 *skus.SkusIDGetParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusIDGetOK, error) {
	ret := m.ctrl.Call(m, "SkusIDGet", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusIDGetOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusIDGet indicates an expected call of SkusIDGet
func (mr *MockSkuIfaceMockRecorder) SkusIDGet(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusIDGet", reflect.TypeOf((*MockSkuIface)(nil).SkusIDGet), arg0, arg1)
}

// SkusIDGetNodes mocks base method
func (m *MockSkuIface) SkusIDGetNodes(arg0 *skus.SkusIDGetNodesParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusIDGetNodesOK, error) {
	ret := m.ctrl.Call(m, "SkusIDGetNodes", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusIDGetNodesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusIDGetNodes indicates an expected call of SkusIDGetNodes
func (mr *MockSkuIfaceMockRecorder) SkusIDGetNodes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusIDGetNodes", reflect.TypeOf((*MockSkuIface)(nil).SkusIDGetNodes), arg0, arg1)
}

// SkusIDPutPack mocks base method
func (m *MockSkuIface) SkusIDPutPack(arg0 *skus.SkusIDPutPackParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusIDPutPackCreated, error) {
	ret := m.ctrl.Call(m, "SkusIDPutPack", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusIDPutPackCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusIDPutPack indicates an expected call of SkusIDPutPack
func (mr *MockSkuIfaceMockRecorder) SkusIDPutPack(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusIDPutPack", reflect.TypeOf((*MockSkuIface)(nil).SkusIDPutPack), arg0, arg1)
}

// SkusPatch mocks base method
func (m *MockSkuIface) SkusPatch(arg0 *skus.SkusPatchParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusPatchOK, error) {
	ret := m.ctrl.Call(m, "SkusPatch", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusPatchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusPatch indicates an expected call of SkusPatch
func (mr *MockSkuIfaceMockRecorder) SkusPatch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusPatch", reflect.TypeOf((*MockSkuIface)(nil).SkusPatch), arg0, arg1)
}

// SkusPost mocks base method
func (m *MockSkuIface) SkusPost(arg0 *skus.SkusPostParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusPostCreated, error) {
	ret := m.ctrl.Call(m, "SkusPost", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusPostCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusPost indicates an expected call of SkusPost
func (mr *MockSkuIfaceMockRecorder) SkusPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusPost", reflect.TypeOf((*MockSkuIface)(nil).SkusPost), arg0, arg1)
}

// SkusPut mocks base method
func (m *MockSkuIface) SkusPut(arg0 *skus.SkusPutParams, arg1 runtime.ClientAuthInfoWriter) (*skus.SkusPutCreated, error) {
	ret := m.ctrl.Call(m, "SkusPut", arg0, arg1)
	ret0, _ := ret[0].(*skus.SkusPutCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SkusPut indicates an expected call of SkusPut
func (mr *MockSkuIfaceMockRecorder) SkusPut(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkusPut", reflect.TypeOf((*MockSkuIface)(nil).SkusPut), arg0, arg1)
}
