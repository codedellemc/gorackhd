// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiegela/gorackhd/rackhd (interfaces: NodeIface)

// Package mock is a generated GoMock package.
package mock

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	nodes "github.com/spiegela/gorackhd/client/nodes"
	reflect "reflect"
)

// MockNodeIface is a mock of NodeIface interface
type MockNodeIface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeIfaceMockRecorder
}

// MockNodeIfaceMockRecorder is the mock recorder for MockNodeIface
type MockNodeIfaceMockRecorder struct {
	mock *MockNodeIface
}

// NewMockNodeIface creates a new mock instance
func NewMockNodeIface(ctrl *gomock.Controller) *MockNodeIface {
	mock := &MockNodeIface{ctrl: ctrl}
	mock.recorder = &MockNodeIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeIface) EXPECT() *MockNodeIfaceMockRecorder {
	return m.recorder
}

// NodesAddRelations mocks base method
func (m *MockNodeIface) NodesAddRelations(arg0 *nodes.NodesAddRelationsParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesAddRelationsOK, error) {
	ret := m.ctrl.Call(m, "NodesAddRelations", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesAddRelationsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesAddRelations indicates an expected call of NodesAddRelations
func (mr *MockNodeIfaceMockRecorder) NodesAddRelations(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesAddRelations", reflect.TypeOf((*MockNodeIface)(nil).NodesAddRelations), arg0, arg1)
}

// NodesDelByID mocks base method
func (m *MockNodeIface) NodesDelByID(arg0 *nodes.NodesDelByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesDelByIDNoContent, error) {
	ret := m.ctrl.Call(m, "NodesDelByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesDelByIDNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesDelByID indicates an expected call of NodesDelByID
func (mr *MockNodeIfaceMockRecorder) NodesDelByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesDelByID", reflect.TypeOf((*MockNodeIface)(nil).NodesDelByID), arg0, arg1)
}

// NodesDelRelations mocks base method
func (m *MockNodeIface) NodesDelRelations(arg0 *nodes.NodesDelRelationsParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesDelRelationsNoContent, error) {
	ret := m.ctrl.Call(m, "NodesDelRelations", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesDelRelationsNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesDelRelations indicates an expected call of NodesDelRelations
func (mr *MockNodeIfaceMockRecorder) NodesDelRelations(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesDelRelations", reflect.TypeOf((*MockNodeIface)(nil).NodesDelRelations), arg0, arg1)
}

// NodesDelTagByID mocks base method
func (m *MockNodeIface) NodesDelTagByID(arg0 *nodes.NodesDelTagByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesDelTagByIDNoContent, error) {
	ret := m.ctrl.Call(m, "NodesDelTagByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesDelTagByIDNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesDelTagByID indicates an expected call of NodesDelTagByID
func (mr *MockNodeIfaceMockRecorder) NodesDelTagByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesDelTagByID", reflect.TypeOf((*MockNodeIface)(nil).NodesDelTagByID), arg0, arg1)
}

// NodesGetAll mocks base method
func (m *MockNodeIface) NodesGetAll(arg0 *nodes.NodesGetAllParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetAllOK, error) {
	ret := m.ctrl.Call(m, "NodesGetAll", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetAllOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetAll indicates an expected call of NodesGetAll
func (mr *MockNodeIfaceMockRecorder) NodesGetAll(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetAll", reflect.TypeOf((*MockNodeIface)(nil).NodesGetAll), arg0, arg1)
}

// NodesGetByID mocks base method
func (m *MockNodeIface) NodesGetByID(arg0 *nodes.NodesGetByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetByID indicates an expected call of NodesGetByID
func (mr *MockNodeIfaceMockRecorder) NodesGetByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetByID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetByID), arg0, arg1)
}

// NodesGetCatalogByID mocks base method
func (m *MockNodeIface) NodesGetCatalogByID(arg0 *nodes.NodesGetCatalogByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetCatalogByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetCatalogByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetCatalogByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetCatalogByID indicates an expected call of NodesGetCatalogByID
func (mr *MockNodeIfaceMockRecorder) NodesGetCatalogByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetCatalogByID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetCatalogByID), arg0, arg1)
}

// NodesGetCatalogSourceByID mocks base method
func (m *MockNodeIface) NodesGetCatalogSourceByID(arg0 *nodes.NodesGetCatalogSourceByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetCatalogSourceByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetCatalogSourceByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetCatalogSourceByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetCatalogSourceByID indicates an expected call of NodesGetCatalogSourceByID
func (mr *MockNodeIfaceMockRecorder) NodesGetCatalogSourceByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetCatalogSourceByID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetCatalogSourceByID), arg0, arg1)
}

// NodesGetObmsByNodeID mocks base method
func (m *MockNodeIface) NodesGetObmsByNodeID(arg0 *nodes.NodesGetObmsByNodeIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetObmsByNodeIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetObmsByNodeID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetObmsByNodeIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetObmsByNodeID indicates an expected call of NodesGetObmsByNodeID
func (mr *MockNodeIfaceMockRecorder) NodesGetObmsByNodeID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetObmsByNodeID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetObmsByNodeID), arg0, arg1)
}

// NodesGetPollersByID mocks base method
func (m *MockNodeIface) NodesGetPollersByID(arg0 *nodes.NodesGetPollersByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetPollersByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetPollersByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetPollersByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetPollersByID indicates an expected call of NodesGetPollersByID
func (mr *MockNodeIfaceMockRecorder) NodesGetPollersByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetPollersByID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetPollersByID), arg0, arg1)
}

// NodesGetRelations mocks base method
func (m *MockNodeIface) NodesGetRelations(arg0 *nodes.NodesGetRelationsParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetRelationsOK, error) {
	ret := m.ctrl.Call(m, "NodesGetRelations", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetRelationsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetRelations indicates an expected call of NodesGetRelations
func (mr *MockNodeIfaceMockRecorder) NodesGetRelations(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetRelations", reflect.TypeOf((*MockNodeIface)(nil).NodesGetRelations), arg0, arg1)
}

// NodesGetSSHByID mocks base method
func (m *MockNodeIface) NodesGetSSHByID(arg0 *nodes.NodesGetSSHByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetSSHByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetSSHByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetSSHByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetSSHByID indicates an expected call of NodesGetSSHByID
func (mr *MockNodeIfaceMockRecorder) NodesGetSSHByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetSSHByID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetSSHByID), arg0, arg1)
}

// NodesGetTagsByID mocks base method
func (m *MockNodeIface) NodesGetTagsByID(arg0 *nodes.NodesGetTagsByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetTagsByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetTagsByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetTagsByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetTagsByID indicates an expected call of NodesGetTagsByID
func (mr *MockNodeIfaceMockRecorder) NodesGetTagsByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetTagsByID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetTagsByID), arg0, arg1)
}

// NodesGetWorkflowByID mocks base method
func (m *MockNodeIface) NodesGetWorkflowByID(arg0 *nodes.NodesGetWorkflowByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesGetWorkflowByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesGetWorkflowByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesGetWorkflowByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesGetWorkflowByID indicates an expected call of NodesGetWorkflowByID
func (mr *MockNodeIfaceMockRecorder) NodesGetWorkflowByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesGetWorkflowByID", reflect.TypeOf((*MockNodeIface)(nil).NodesGetWorkflowByID), arg0, arg1)
}

// NodesMasterDelTagByID mocks base method
func (m *MockNodeIface) NodesMasterDelTagByID(arg0 *nodes.NodesMasterDelTagByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesMasterDelTagByIDNoContent, error) {
	ret := m.ctrl.Call(m, "NodesMasterDelTagByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesMasterDelTagByIDNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesMasterDelTagByID indicates an expected call of NodesMasterDelTagByID
func (mr *MockNodeIfaceMockRecorder) NodesMasterDelTagByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesMasterDelTagByID", reflect.TypeOf((*MockNodeIface)(nil).NodesMasterDelTagByID), arg0, arg1)
}

// NodesPatchByID mocks base method
func (m *MockNodeIface) NodesPatchByID(arg0 *nodes.NodesPatchByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesPatchByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesPatchByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesPatchByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesPatchByID indicates an expected call of NodesPatchByID
func (mr *MockNodeIfaceMockRecorder) NodesPatchByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesPatchByID", reflect.TypeOf((*MockNodeIface)(nil).NodesPatchByID), arg0, arg1)
}

// NodesPatchTagByID mocks base method
func (m *MockNodeIface) NodesPatchTagByID(arg0 *nodes.NodesPatchTagByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesPatchTagByIDOK, error) {
	ret := m.ctrl.Call(m, "NodesPatchTagByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesPatchTagByIDOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesPatchTagByID indicates an expected call of NodesPatchTagByID
func (mr *MockNodeIfaceMockRecorder) NodesPatchTagByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesPatchTagByID", reflect.TypeOf((*MockNodeIface)(nil).NodesPatchTagByID), arg0, arg1)
}

// NodesPost mocks base method
func (m *MockNodeIface) NodesPost(arg0 *nodes.NodesPostParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesPostCreated, error) {
	ret := m.ctrl.Call(m, "NodesPost", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesPostCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesPost indicates an expected call of NodesPost
func (mr *MockNodeIfaceMockRecorder) NodesPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesPost", reflect.TypeOf((*MockNodeIface)(nil).NodesPost), arg0, arg1)
}

// NodesPostSSHByID mocks base method
func (m *MockNodeIface) NodesPostSSHByID(arg0 *nodes.NodesPostSSHByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesPostSSHByIDCreated, error) {
	ret := m.ctrl.Call(m, "NodesPostSSHByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesPostSSHByIDCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesPostSSHByID indicates an expected call of NodesPostSSHByID
func (mr *MockNodeIfaceMockRecorder) NodesPostSSHByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesPostSSHByID", reflect.TypeOf((*MockNodeIface)(nil).NodesPostSSHByID), arg0, arg1)
}

// NodesPostWorkflowByID mocks base method
func (m *MockNodeIface) NodesPostWorkflowByID(arg0 *nodes.NodesPostWorkflowByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesPostWorkflowByIDCreated, error) {
	ret := m.ctrl.Call(m, "NodesPostWorkflowByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesPostWorkflowByIDCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesPostWorkflowByID indicates an expected call of NodesPostWorkflowByID
func (mr *MockNodeIfaceMockRecorder) NodesPostWorkflowByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesPostWorkflowByID", reflect.TypeOf((*MockNodeIface)(nil).NodesPostWorkflowByID), arg0, arg1)
}

// NodesPutObmsByNodeID mocks base method
func (m *MockNodeIface) NodesPutObmsByNodeID(arg0 *nodes.NodesPutObmsByNodeIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesPutObmsByNodeIDCreated, error) {
	ret := m.ctrl.Call(m, "NodesPutObmsByNodeID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesPutObmsByNodeIDCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesPutObmsByNodeID indicates an expected call of NodesPutObmsByNodeID
func (mr *MockNodeIfaceMockRecorder) NodesPutObmsByNodeID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesPutObmsByNodeID", reflect.TypeOf((*MockNodeIface)(nil).NodesPutObmsByNodeID), arg0, arg1)
}

// NodesWorkflowActionByID mocks base method
func (m *MockNodeIface) NodesWorkflowActionByID(arg0 *nodes.NodesWorkflowActionByIDParams, arg1 runtime.ClientAuthInfoWriter) (*nodes.NodesWorkflowActionByIDAccepted, error) {
	ret := m.ctrl.Call(m, "NodesWorkflowActionByID", arg0, arg1)
	ret0, _ := ret[0].(*nodes.NodesWorkflowActionByIDAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesWorkflowActionByID indicates an expected call of NodesWorkflowActionByID
func (mr *MockNodeIfaceMockRecorder) NodesWorkflowActionByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesWorkflowActionByID", reflect.TypeOf((*MockNodeIface)(nil).NodesWorkflowActionByID), arg0, arg1)
}
