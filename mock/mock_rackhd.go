// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiegela/gorackhd/rackhd (interfaces: Iface)

// Package mock is a generated GoMock package.
package mock

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	rackhd "github.com/spiegela/gorackhd/rackhd"
	reflect "reflect"
)

// MockIface is a mock of Iface interface
type MockIface struct {
	ctrl     *gomock.Controller
	recorder *MockIfaceMockRecorder
}

// MockIfaceMockRecorder is the mock recorder for MockIface
type MockIfaceMockRecorder struct {
	mock *MockIface
}

// NewMockIface creates a new mock instance
func NewMockIface(ctrl *gomock.Controller) *MockIface {
	mock := &MockIface{ctrl: ctrl}
	mock.recorder = &MockIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIface) EXPECT() *MockIfaceMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockIface) Login(arg0, arg1 string) (runtime.ClientAuthInfoWriter, error) {
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(runtime.ClientAuthInfoWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockIfaceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIface)(nil).Login), arg0, arg1)
}

// Nodes mocks base method
func (m *MockIface) Nodes() rackhd.NodeIface {
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(rackhd.NodeIface)
	return ret0
}

// Nodes indicates an expected call of Nodes
func (mr *MockIfaceMockRecorder) Nodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockIface)(nil).Nodes))
}

// Skus mocks base method
func (m *MockIface) Skus() rackhd.SkuIface {
	ret := m.ctrl.Call(m, "Skus")
	ret0, _ := ret[0].(rackhd.SkuIface)
	return ret0
}

// Skus indicates an expected call of Skus
func (mr *MockIfaceMockRecorder) Skus() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skus", reflect.TypeOf((*MockIface)(nil).Skus))
}

// Tags mocks base method
func (m *MockIface) Tags() rackhd.TagIface {
	ret := m.ctrl.Call(m, "Tags")
	ret0, _ := ret[0].(rackhd.TagIface)
	return ret0
}

// Tags indicates an expected call of Tags
func (mr *MockIfaceMockRecorder) Tags() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tags", reflect.TypeOf((*MockIface)(nil).Tags))
}
