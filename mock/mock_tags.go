// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiegela/gorackhd/rackhd (interfaces: TagIface)

// Package mock is a generated GoMock package.
package mock

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	tags "github.com/spiegela/gorackhd/client/tags"
	reflect "reflect"
)

// MockTagIface is a mock of TagIface interface
type MockTagIface struct {
	ctrl     *gomock.Controller
	recorder *MockTagIfaceMockRecorder
}

// MockTagIfaceMockRecorder is the mock recorder for MockTagIface
type MockTagIfaceMockRecorder struct {
	mock *MockTagIface
}

// NewMockTagIface creates a new mock instance
func NewMockTagIface(ctrl *gomock.Controller) *MockTagIface {
	mock := &MockTagIface{ctrl: ctrl}
	mock.recorder = &MockTagIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTagIface) EXPECT() *MockTagIfaceMockRecorder {
	return m.recorder
}

// CreateTag mocks base method
func (m *MockTagIface) CreateTag(arg0 *tags.CreateTagParams, arg1 runtime.ClientAuthInfoWriter) (*tags.CreateTagCreated, error) {
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1)
	ret0, _ := ret[0].(*tags.CreateTagCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockTagIfaceMockRecorder) CreateTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagIface)(nil).CreateTag), arg0, arg1)
}

// DeleteTag mocks base method
func (m *MockTagIface) DeleteTag(arg0 *tags.DeleteTagParams, arg1 runtime.ClientAuthInfoWriter) (*tags.DeleteTagNoContent, error) {
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1)
	ret0, _ := ret[0].(*tags.DeleteTagNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockTagIfaceMockRecorder) DeleteTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagIface)(nil).DeleteTag), arg0, arg1)
}

// GetAllTags mocks base method
func (m *MockTagIface) GetAllTags(arg0 *tags.GetAllTagsParams, arg1 runtime.ClientAuthInfoWriter) (*tags.GetAllTagsOK, error) {
	ret := m.ctrl.Call(m, "GetAllTags", arg0, arg1)
	ret0, _ := ret[0].(*tags.GetAllTagsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags
func (mr *MockTagIfaceMockRecorder) GetAllTags(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagIface)(nil).GetAllTags), arg0, arg1)
}

// GetNodesByTag mocks base method
func (m *MockTagIface) GetNodesByTag(arg0 *tags.GetNodesByTagParams, arg1 runtime.ClientAuthInfoWriter) (*tags.GetNodesByTagOK, error) {
	ret := m.ctrl.Call(m, "GetNodesByTag", arg0, arg1)
	ret0, _ := ret[0].(*tags.GetNodesByTagOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesByTag indicates an expected call of GetNodesByTag
func (mr *MockTagIfaceMockRecorder) GetNodesByTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesByTag", reflect.TypeOf((*MockTagIface)(nil).GetNodesByTag), arg0, arg1)
}

// GetTag mocks base method
func (m *MockTagIface) GetTag(arg0 *tags.GetTagParams, arg1 runtime.ClientAuthInfoWriter) (*tags.GetTagOK, error) {
	ret := m.ctrl.Call(m, "GetTag", arg0, arg1)
	ret0, _ := ret[0].(*tags.GetTagOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag
func (mr *MockTagIfaceMockRecorder) GetTag(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagIface)(nil).GetTag), arg0, arg1)
}

// PostWorkflowByID mocks base method
func (m *MockTagIface) PostWorkflowByID(arg0 *tags.PostWorkflowByIDParams, arg1 runtime.ClientAuthInfoWriter) (*tags.PostWorkflowByIDAccepted, error) {
	ret := m.ctrl.Call(m, "PostWorkflowByID", arg0, arg1)
	ret0, _ := ret[0].(*tags.PostWorkflowByIDAccepted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostWorkflowByID indicates an expected call of PostWorkflowByID
func (mr *MockTagIfaceMockRecorder) PostWorkflowByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostWorkflowByID", reflect.TypeOf((*MockTagIface)(nil).PostWorkflowByID), arg0, arg1)
}
